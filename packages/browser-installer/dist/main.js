/*! For license information please see main.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("playwright-core")):"function"==typeof define&&define.amd?define(["playwright-core"],e):"object"==typeof exports?exports.browserInstaller=e(require("playwright-core")):t.browserInstaller=e(t["playwright-core"])}(this,(function(t){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="dist/",r(r.s=34)}([function(t,e){t.exports=require("path")},function(t,e){t.exports=require("fs")},function(t,e){t.exports=require("util")},function(t,e,r){"use strict";(function(t){r.d(e,"b",(function(){return f})),r.d(e,"c",(function(){return h})),r.d(e,"e",(function(){return d})),r.d(e,"d",(function(){return m})),r.d(e,"a",(function(){return y}));var n=r(18),o=r(1),i=r(4),s=r(0),a=r(2),c=r(30),u=r(5);const f=["chromium","webkit","firefox","ffmpeg"],l={chromium:{"ubuntu18.04":["chrome-linux","chrome"],"ubuntu20.04":["chrome-linux","chrome"],"mac10.13":["chrome-mac","Chromium.app","Contents","MacOS","Chromium"],"mac10.14":["chrome-mac","Chromium.app","Contents","MacOS","Chromium"],"mac10.15":["chrome-mac","Chromium.app","Contents","MacOS","Chromium"],mac11:["chrome-mac","Chromium.app","Contents","MacOS","Chromium"],"mac11-arm64":["chrome-mac","Chromium.app","Contents","MacOS","Chromium"],win32:["chrome-win","chrome.exe"],win64:["chrome-win","chrome.exe"]},firefox:{"ubuntu18.04":["firefox","firefox"],"ubuntu20.04":["firefox","firefox"],"mac10.13":["firefox","Nightly.app","Contents","MacOS","firefox"],"mac10.14":["firefox","Nightly.app","Contents","MacOS","firefox"],"mac10.15":["firefox","Nightly.app","Contents","MacOS","firefox"],mac11:["firefox","Nightly.app","Contents","MacOS","firefox"],"mac11-arm64":["firefox","Nightly.app","Contents","MacOS","firefox"],win32:["firefox","firefox.exe"],win64:["firefox","firefox.exe"]},webkit:{"ubuntu18.04":["pw_run.sh"],"ubuntu20.04":["pw_run.sh"],"mac10.13":void 0,"mac10.14":["pw_run.sh"],"mac10.15":["pw_run.sh"],mac11:["pw_run.sh"],"mac11-arm64":["pw_run.sh"],win32:["Playwright.exe"],win64:["Playwright.exe"]},ffmpeg:{"ubuntu18.04":["ffmpeg-linux"],"ubuntu20.04":["ffmpeg-linux"],"mac10.13":["ffmpeg-mac"],"mac10.14":["ffmpeg-mac"],"mac10.15":["ffmpeg-mac"],mac11:["ffmpeg-mac"],"mac11-arm64":["ffmpeg-mac"],win32:["ffmpeg-win32.exe"],win64:["ffmpeg-win64.exe"]}},p={chromium:{"ubuntu18.04":"%s/builds/chromium/%s/chromium-linux.zip","ubuntu20.04":"%s/builds/chromium/%s/chromium-linux.zip","mac10.13":"%s/builds/chromium/%s/chromium-mac.zip","mac10.14":"%s/builds/chromium/%s/chromium-mac.zip","mac10.15":"%s/builds/chromium/%s/chromium-mac.zip",mac11:"%s/builds/chromium/%s/chromium-mac.zip","mac11-arm64":"%s/builds/chromium/%s/chromium-mac-arm64.zip",win32:"%s/builds/chromium/%s/chromium-win32.zip",win64:"%s/builds/chromium/%s/chromium-win64.zip"},firefox:{"ubuntu18.04":"%s/builds/firefox/%s/firefox-ubuntu-18.04.zip","ubuntu20.04":"%s/builds/firefox/%s/firefox-ubuntu-18.04.zip","mac10.13":"%s/builds/firefox/%s/firefox-mac-10.14.zip","mac10.14":"%s/builds/firefox/%s/firefox-mac-10.14.zip","mac10.15":"%s/builds/firefox/%s/firefox-mac-10.14.zip",mac11:"%s/builds/firefox/%s/firefox-mac-10.14.zip","mac11-arm64":"%s/builds/firefox/%s/firefox-mac-11.0-arm64.zip",win32:"%s/builds/firefox/%s/firefox-win32.zip",win64:"%s/builds/firefox/%s/firefox-win64.zip"},webkit:{"ubuntu18.04":"%s/builds/webkit/%s/webkit-ubuntu-18.04.zip","ubuntu20.04":"%s/builds/webkit/%s/webkit-ubuntu-20.04.zip","mac10.13":void 0,"mac10.14":"%s/builds/webkit/%s/webkit-mac-10.14.zip","mac10.15":"%s/builds/webkit/%s/webkit-mac-10.15.zip",mac11:"%s/builds/webkit/%s/webkit-mac-10.15.zip","mac11-arm64":"%s/builds/webkit/%s/webkit-mac-11.0-arm64.zip",win32:"%s/builds/webkit/%s/webkit-win64.zip",win64:"%s/builds/webkit/%s/webkit-win64.zip"},ffmpeg:{"ubuntu18.04":"%s/builds/ffmpeg/%s/ffmpeg-linux.zip","ubuntu20.04":"%s/builds/ffmpeg/%s/ffmpeg-linux.zip","mac10.13":"%s/builds/ffmpeg/%s/ffmpeg-mac.zip","mac10.14":"%s/builds/ffmpeg/%s/ffmpeg-mac.zip","mac10.15":"%s/builds/ffmpeg/%s/ffmpeg-mac.zip",mac11:"%s/builds/ffmpeg/%s/ffmpeg-mac.zip","mac11-arm64":"%s/builds/ffmpeg/%s/ffmpeg-mac.zip",win32:"%s/builds/ffmpeg/%s/ffmpeg-win32.zip",win64:"%s/builds/ffmpeg/%s/ffmpeg-win64.zip"}},h=(()=>{const t=i.platform();if("darwin"===t){const[t,e]=Object(n.execSync)("sw_vers -productVersion",{stdio:["ignore","pipe","ignore"]}).toString("utf8").trim().split(".").map((t=>parseInt(t,10)));let r=!1;t>=11&&(r="1"===Object(n.execSync)("/usr/sbin/sysctl -in hw.optional.arm64",{stdio:["ignore","pipe","ignore"]}).toString().trim());return`mac${10===t?`${t}.${e}`:`${t}`}${r?"-arm64":""}`}if("linux"===t){const t=Object(c.a)();return parseInt(t,10)<=19?"ubuntu18.04":"ubuntu20.04"}return"win32"===t?"x64"===i.arch()?"win64":"win32":t})(),d=(()=>{let e;const r=Object(u.d)("PLAYWRIGHT_BROWSERS_PATH");if("0"===r)e=s.join(t,"..","..",".local-browsers");else if(r)e=r;else{let t;if("linux"===process.platform)t=process.env.XDG_CACHE_HOME||s.join(i.homedir(),".cache");else if("darwin"===process.platform)t=s.join(i.homedir(),"Library","Caches");else{if("win32"!==process.platform)throw new Error("Unsupported platform: "+process.platform);t=process.env.LOCALAPPDATA||s.join(i.homedir(),"AppData","Local")}e=s.join(t,"ms-playwright")}return s.isAbsolute(e)||(e=s.resolve(Object(u.d)("INIT_CWD")||process.cwd(),e)),e})();function m(t){const e=s.basename(t);for(const t of f)if(e.startsWith(t+"-"))return!0;return!1}class y{constructor(t){console.log("package path",t);const e=JSON.parse(o.readFileSync(s.join(t,"browsers.json"),"utf8"));this._descriptors=e.browsers}browserDirectory(t){const e=this._descriptors.find((e=>e.name===t));return Object(u.a)(e,`ERROR: Playwright does not support ${t}`),s.join(d,`${e.name}-${e.revision}`)}revision(t){const e=this._descriptors.find((e=>e.name===t));return Object(u.a)(e,`ERROR: Playwright does not support ${t}`),parseInt(e.revision,10)}linuxLddDirectories(t){const e=this.browserDirectory(t);return"chromium"===t?[s.join(e,"chrome-linux")]:"firefox"===t?[s.join(e,"firefox")]:"webkit"===t?[s.join(e,"minibrowser-gtk"),s.join(e,"minibrowser-gtk","bin"),s.join(e,"minibrowser-gtk","lib"),s.join(e,"minibrowser-wpe"),s.join(e,"minibrowser-wpe","bin"),s.join(e,"minibrowser-wpe","lib")]:[]}windowsExeAndDllDirectories(t){const e=this.browserDirectory(t);return"chromium"===t?[s.join(e,"chrome-win")]:"firefox"===t?[s.join(e,"firefox")]:"webkit"===t?[e]:[]}executablePath(t){const e=this.browserDirectory(t),r=l[t][h];return r?s.join(e,...r):void 0}downloadURL(t){const e=this._descriptors.find((e=>e.name===t));Object(u.a)(e,`ERROR: Playwright does not support ${t}`);const r=Object(u.d)({chromium:"PLAYWRIGHT_CHROMIUM_DOWNLOAD_HOST",firefox:"PLAYWRIGHT_FIREFOX_DOWNLOAD_HOST",webkit:"PLAYWRIGHT_WEBKIT_DOWNLOAD_HOST",ffmpeg:"PLAYWRIGHT_FFMPEG_DOWNLOAD_HOST"}[t])||Object(u.d)("PLAYWRIGHT_DOWNLOAD_HOST")||"https://playwright.azureedge.net",n=p[t][h];return Object(u.a)(n,`ERROR: Playwright does not support ${t} on ${h}`),a.format(n,r,e.revision)}shouldDownload(t){const e=this._descriptors.find((e=>e.name===t));return!!e&&!1!==e.download}}}).call(this,"/")},function(t,e){t.exports=require("os")},function(t,e,r){"use strict";r.d(e,"a",(function(){return a})),r.d(e,"d",(function(){return c})),r.d(e,"c",(function(){return u})),r.d(e,"b",(function(){return f}));r(0);var n=r(1),o=r.n(n),i=r(2),s=r(19);i.promisify(o.a.mkdir.bind(o.a));function a(t,e){if(!t)throw new Error(e)}c("PWDEBUG");function c(t){let e=process.env[t];return e=void 0===e?process.env[`npm_config_${t.toLowerCase()}`]:e,e=void 0===e?process.env[`npm_package_config_${t.toLowerCase()}`]:e,e}function u(t){const e=c(t);return!!e&&"false"!==e&&"0"!==e}function f(t){const e=s.createHash("sha1");return e.update(t),e.digest("hex")}},function(t,e){t.exports=require("stream")},function(t,e){t.exports=require("events")},function(t,e){t.exports=require("assert")},function(t,e){t.exports=require("url")},function(t,e,r){"use strict";r.d(e,"a",(function(){return o}));var n=r(7);const o=new n.EventEmitter;o.on("progress",(({current:t,total:e,name:r})=>{const n=`Downloading ${r} - ${t}/${e}`;console.log(n)})),o.on("done",(()=>{}))},function(t,e,r){var n=r(23);function o(t){var e=function(){return e.called?e.value:(e.called=!0,e.value=t.apply(this,arguments))};return e.called=!1,e}function i(t){var e=function(){if(e.called)throw new Error(e.onceError);return e.called=!0,e.value=t.apply(this,arguments)},r=t.name||"Function wrapped with `once`";return e.onceError=r+" shouldn't be called more than once",e.called=!1,e}t.exports=n(o),t.exports.strict=n(i),o.proto=o((function(){Object.defineProperty(Function.prototype,"once",{value:function(){return o(this)},configurable:!0}),Object.defineProperty(Function.prototype,"onceStrict",{value:function(){return i(this)},configurable:!0})}))},function(t,e,r){"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?t.exports=r(57):t.exports=r(59)},function(t,e,r){"use strict";r.d(e,"a",(function(){return x})),r.d(e,"b",(function(){return C}));var n=r(31),o=r.n(n),i=r(1),s=r.n(i),a=r(4),c=r.n(a),u=r(0),f=r.n(u),l=r(32),p=r.n(l),h=r(33),d=r(9),m=r(2),y=r(3),g=r(10);const b=r(72),w=m.promisify(s.a.unlink.bind(s.a)),v=m.promisify(s.a.chmod.bind(s.a)),E=t=>new Promise((e=>s.a.stat(t,(t=>e(!t)))));async function x(t,e){const r=t.browserDirectory(e),n=`${e} v${t.revision(e)}`;if(await E(r))return!1;let i,s=0;function a(t,e){i||(i=new p.a(`Downloading ${n} - ${_(e)} [:bar] :percent :etas `,{complete:"=",incomplete:" ",width:20,total:e}));const r=t-s;if(s=t,i.tick(r),g.a.emit("progress",{name:n,delta:r,current:_(t),total:_(e)}),t===e){const t=`${n} installed.`;g.a.emit("done",t),console.log(t)}}const u=t.downloadURL(e),l=f.a.join(c.a.tmpdir(),`playwright-download-${e}-${y.c}-${t.revision(e)}.zip`);try{for(let t=1,e=3;t<=e;++t){const{error:r}=await O(u,l,a);if(!r)break;const n="object"==typeof r&&"string"==typeof r.message?r.message:"";if(!(t<e&&(n.includes("ECONNRESET")||n.includes("ETIMEDOUT"))))throw r;{const e=200*Math.random()+250*Math.pow(1.5,t);await new Promise((t=>setTimeout(t,e)))}}await o()(l,{dir:r}),await v(t.executablePath(e),493)}catch(t){throw process.exitCode=1,t}finally{await E(l)&&await w(l)}return C(`${n} downloaded to ${r}`),!0}function _(t){const e=t/1024/1024;return Math.round(10*e)/10+" Mb"}function O(t,e,r){let n=({error:t})=>{},o=0,i=0;const a=new Promise((t=>{n=t}));return S(t,"GET",(o=>{if(200!==o.statusCode){const e=new Error(`Download failed: server returned code ${o.statusCode}. URL: ${t}`);return o.resume(),void n({error:e})}const a=s.a.createWriteStream(e);a.on("finish",(()=>n({error:null}))),a.on("error",(t=>n({error:t}))),o.pipe(a),i=parseInt(o.headers["content-length"],10),r&&o.on("data",c)})).on("error",(t=>n({error:t}))),a;function c(t){o+=t.length,r(o,i)}}function S(t,e,n){let o=d.parse(t);o.method=e;const i=Object(h.getProxyForUrl)(t);if(i)if(t.startsWith("http:")){const t=d.parse(i);o={path:o.href,host:t.hostname,port:t.port}}else{const t=d.parse(i);t.secureProxy="https:"===t.protocol,o.agent=new b(t),o.rejectUnauthorized=!1}const s=t=>{t.statusCode>=300&&t.statusCode<400&&t.headers.location?S(t.headers.location,e,n):n(t)},a="https:"===o.protocol?r(79).request(o,s):r(80).request(o,s);return a.end(),a}function C(t){const e=process.env.npm_config_loglevel;["silent","error","warn"].indexOf(e||"")>-1||console.log(t)}},function(t,e,r){"use strict";(function(t){r.d(e,"a",(function(){return f})),r.d(e,"b",(function(){return l}));var n=r(1),o=r.n(n),i=r(17),s=r.n(i),a=r(10);const c=["log","error","info","warn"];if(console.log){const t=t=>{const e=console[t];console[t]=function(){Array.prototype.unshift.call(arguments,`${"reflex-browser-installer".toUpperCase()}:`),e.apply(this,arguments)}};c.map(t)}const{installBrowsersWithProgressBar:u}=r(36);class f{constructor(t){this.browsers=["chromium","firefox","webkit"],({browsers:this.browsers,installPath:this.installPath}=t),this.installPath||console.error("installPath not set")}async run(){await this.checkIfInstalled()?console.log("Browsers are installed."):(console.log("Browsers are NOT installed. Attempting to install..."),await this.install())}async checkIfInstalled(){console.log("Checking if browsers are installed...");return!0===await(async()=>{o.a.existsSync(this.installPath)||o.a.mkdirSync(this.installPath);const t=await async function(t){try{const e=[],r=await n.promises.opendir(t);for await(const t of r)e.push(t.name);return e}catch(t){return console.error(t),!1}}(this.installPath);return!!t&&(console.log(`Found at install directory (${this.installPath}):`,t),this.browsers.every((e=>t.find((t=>t.includes(e))))))})()?(console.log("Browsers are installed."),!0):(console.error("Browsers are NOT installed!"),!1)}async install(e={browsers:this.browsers}){return e.browsers.length?(a.a.on("progress",(({current:t,total:e,name:r})=>{const n=`Downloading ${r} - ${t}/${e}`;console.log(n)})),a.a.on("done",(async()=>{})),await u(t).catch((t=>{console.error(`Failed to install browsers, caused by\n${t.stack}`)})),e.browsers.length>=1&&console.log("Browser paths:",e.browsers.map((t=>s.a[t].executablePath()))),this.checkIfInstalled()):(console.error(`No browsers were passed in to install. Setting defaults: ${this.browsers}`),!1)}}function l(t){t||console.error("No browser name given.");const e=s.a[t].executablePath(),r=function(t,e){const r=new RegExp(Object.keys(e).join("|"),"gi");return t.replace(r,(function(t){return e[t.toLowerCase()]}))}(e,{playwright:"reflex-browser-installer","app.asar":"app.asar.unpacked"});return console.log("Is the path the same as initially?",e===r,`Changed to: ${r}`),r}}).call(this,"/")},function(t,e,r){t.exports=p,p.Minimatch=h;var n=function(){try{return r(0)}catch(t){}}()||{sep:"/"};p.sep=n.sep;var o=p.GLOBSTAR=h.GLOBSTAR={},i=r(38),s={"!":{open:"(?:(?!(?:",close:"))[^/]*?)"},"?":{open:"(?:",close:")?"},"+":{open:"(?:",close:")+"},"*":{open:"(?:",close:")*"},"@":{open:"(?:",close:")"}},a="[^/]",c=a+"*?",u="().*{}+?[]^$\\!".split("").reduce((function(t,e){return t[e]=!0,t}),{});var f=/\/+/;function l(t,e){e=e||{};var r={};return Object.keys(t).forEach((function(e){r[e]=t[e]})),Object.keys(e).forEach((function(t){r[t]=e[t]})),r}function p(t,e,r){return m(e),r||(r={}),!(!r.nocomment&&"#"===e.charAt(0))&&new h(e,r).match(t)}function h(t,e){if(!(this instanceof h))return new h(t,e);m(t),e||(e={}),t=t.trim(),e.allowWindowsEscape||"/"===n.sep||(t=t.split(n.sep).join("/")),this.options=e,this.set=[],this.pattern=t,this.regexp=null,this.negate=!1,this.comment=!1,this.empty=!1,this.partial=!!e.partial,this.make()}function d(t,e){return e||(e=this instanceof h?this.options:{}),t=void 0===t?this.pattern:t,m(t),e.nobrace||!/\{(?:(?!\{).)*\}/.test(t)?[t]:i(t)}p.filter=function(t,e){return e=e||{},function(r,n,o){return p(r,t,e)}},p.defaults=function(t){if(!t||"object"!=typeof t||!Object.keys(t).length)return p;var e=p,r=function(r,n,o){return e(r,n,l(t,o))};return(r.Minimatch=function(r,n){return new e.Minimatch(r,l(t,n))}).defaults=function(r){return e.defaults(l(t,r)).Minimatch},r.filter=function(r,n){return e.filter(r,l(t,n))},r.defaults=function(r){return e.defaults(l(t,r))},r.makeRe=function(r,n){return e.makeRe(r,l(t,n))},r.braceExpand=function(r,n){return e.braceExpand(r,l(t,n))},r.match=function(r,n,o){return e.match(r,n,l(t,o))},r},h.defaults=function(t){return p.defaults(t).Minimatch},h.prototype.debug=function(){},h.prototype.make=function(){var t=this.pattern,e=this.options;if(!e.nocomment&&"#"===t.charAt(0))return void(this.comment=!0);if(!t)return void(this.empty=!0);this.parseNegate();var r=this.globSet=this.braceExpand();e.debug&&(this.debug=function(){console.error.apply(console,arguments)});this.debug(this.pattern,r),r=this.globParts=r.map((function(t){return t.split(f)})),this.debug(this.pattern,r),r=r.map((function(t,e,r){return t.map(this.parse,this)}),this),this.debug(this.pattern,r),r=r.filter((function(t){return-1===t.indexOf(!1)})),this.debug(this.pattern,r),this.set=r},h.prototype.parseNegate=function(){var t=this.pattern,e=!1,r=this.options,n=0;if(r.nonegate)return;for(var o=0,i=t.length;o<i&&"!"===t.charAt(o);o++)e=!e,n++;n&&(this.pattern=t.substr(n));this.negate=e},p.braceExpand=function(t,e){return d(t,e)},h.prototype.braceExpand=d;var m=function(t){if("string"!=typeof t)throw new TypeError("invalid pattern");if(t.length>65536)throw new TypeError("pattern is too long")};h.prototype.parse=function(t,e){m(t);var r=this.options;if("**"===t){if(!r.noglobstar)return o;t="*"}if(""===t)return"";var n,i="",f=!!r.nocase,l=!1,p=[],h=[],d=!1,g=-1,b=-1,w="."===t.charAt(0)?"":r.dot?"(?!(?:^|\\/)\\.{1,2}(?:$|\\/))":"(?!\\.)",v=this;function E(){if(n){switch(n){case"*":i+=c,f=!0;break;case"?":i+=a,f=!0;break;default:i+="\\"+n}v.debug("clearStateChar %j %j",n,i),n=!1}}for(var x,_=0,O=t.length;_<O&&(x=t.charAt(_));_++)if(this.debug("%s\t%s %s %j",t,_,i,x),l&&u[x])i+="\\"+x,l=!1;else switch(x){case"/":return!1;case"\\":E(),l=!0;continue;case"?":case"*":case"+":case"@":case"!":if(this.debug("%s\t%s %s %j <-- stateChar",t,_,i,x),d){this.debug("  in class"),"!"===x&&_===b+1&&(x="^"),i+=x;continue}v.debug("call clearStateChar %j",n),E(),n=x,r.noext&&E();continue;case"(":if(d){i+="(";continue}if(!n){i+="\\(";continue}p.push({type:n,start:_-1,reStart:i.length,open:s[n].open,close:s[n].close}),i+="!"===n?"(?:(?!(?:":"(?:",this.debug("plType %j %j",n,i),n=!1;continue;case")":if(d||!p.length){i+="\\)";continue}E(),f=!0;var S=p.pop();i+=S.close,"!"===S.type&&h.push(S),S.reEnd=i.length;continue;case"|":if(d||!p.length||l){i+="\\|",l=!1;continue}E(),i+="|";continue;case"[":if(E(),d){i+="\\"+x;continue}d=!0,b=_,g=i.length,i+=x;continue;case"]":if(_===b+1||!d){i+="\\"+x,l=!1;continue}var C=t.substring(b+1,_);try{RegExp("["+C+"]")}catch(t){var k=this.parse(C,y);i=i.substr(0,g)+"\\["+k[0]+"\\]",f=f||k[1],d=!1;continue}f=!0,d=!1,i+=x;continue;default:E(),l?l=!1:!u[x]||"^"===x&&d||(i+="\\"),i+=x}d&&(C=t.substr(b+1),k=this.parse(C,y),i=i.substr(0,g)+"\\["+k[0],f=f||k[1]);for(S=p.pop();S;S=p.pop()){var T=i.slice(S.reStart+S.open.length);this.debug("setting tail",i,S),T=T.replace(/((?:\\{2}){0,64})(\\?)\|/g,(function(t,e,r){return r||(r="\\"),e+e+r+"|"})),this.debug("tail=%j\n   %s",T,T,S,i);var I="*"===S.type?c:"?"===S.type?a:"\\"+S.type;f=!0,i=i.slice(0,S.reStart)+I+"\\("+T}E(),l&&(i+="\\\\");var L=!1;switch(i.charAt(0)){case"[":case".":case"(":L=!0}for(var j=h.length-1;j>-1;j--){var F=h[j],A=i.slice(0,F.reStart),N=i.slice(F.reStart,F.reEnd-8),R=i.slice(F.reEnd-8,F.reEnd),M=i.slice(F.reEnd);R+=M;var P=A.split("(").length-1,D=M;for(_=0;_<P;_++)D=D.replace(/\)[+*?]?/,"");var z="";""===(M=D)&&e!==y&&(z="$"),i=A+N+M+z+R}""!==i&&f&&(i="(?=.)"+i);L&&(i=w+i);if(e===y)return[i,f];if(!f)return function(t){return t.replace(/\\(.)/g,"$1")}(t);var $=r.nocase?"i":"";try{var B=new RegExp("^"+i+"$",$)}catch(t){return new RegExp("$.")}return B._glob=t,B._src=i,B};var y={};p.makeRe=function(t,e){return new h(t,e||{}).makeRe()},h.prototype.makeRe=function(){if(this.regexp||!1===this.regexp)return this.regexp;var t=this.set;if(!t.length)return this.regexp=!1,this.regexp;var e=this.options,r=e.noglobstar?c:e.dot?"(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?":"(?:(?!(?:\\/|^)\\.).)*?",n=e.nocase?"i":"",i=t.map((function(t){return t.map((function(t){return t===o?r:"string"==typeof t?function(t){return t.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")}(t):t._src})).join("\\/")})).join("|");i="^(?:"+i+")$",this.negate&&(i="^(?!"+i+").*$");try{this.regexp=new RegExp(i,n)}catch(t){this.regexp=!1}return this.regexp},p.match=function(t,e,r){var n=new h(e,r=r||{});return t=t.filter((function(t){return n.match(t)})),n.options.nonull&&!t.length&&t.push(e),t},h.prototype.match=function(t,e){if(void 0===e&&(e=this.partial),this.debug("match",t,this.pattern),this.comment)return!1;if(this.empty)return""===t;if("/"===t&&e)return!0;var r=this.options;"/"!==n.sep&&(t=t.split(n.sep).join("/")),t=t.split(f),this.debug(this.pattern,"split",t);var o,i,s=this.set;for(this.debug(this.pattern,"set",s),i=t.length-1;i>=0&&!(o=t[i]);i--);for(i=0;i<s.length;i++){var a=s[i],c=t;if(r.matchBase&&1===a.length&&(c=[o]),this.matchOne(c,a,e))return!!r.flipNegate||!this.negate}return!r.flipNegate&&this.negate},h.prototype.matchOne=function(t,e,r){var n=this.options;this.debug("matchOne",{this:this,file:t,pattern:e}),this.debug("matchOne",t.length,e.length);for(var i=0,s=0,a=t.length,c=e.length;i<a&&s<c;i++,s++){this.debug("matchOne loop");var u,f=e[s],l=t[i];if(this.debug(e,f,l),!1===f)return!1;if(f===o){this.debug("GLOBSTAR",[e,f,l]);var p=i,h=s+1;if(h===c){for(this.debug("** at the end");i<a;i++)if("."===t[i]||".."===t[i]||!n.dot&&"."===t[i].charAt(0))return!1;return!0}for(;p<a;){var d=t[p];if(this.debug("\nglobstar while",t,p,e,h,d),this.matchOne(t.slice(p),e.slice(h),r))return this.debug("globstar found match!",p,a,d),!0;if("."===d||".."===d||!n.dot&&"."===d.charAt(0)){this.debug("dot detected!",t,p,e,h);break}this.debug("globstar swallow a segment, and continue"),p++}return!(!r||(this.debug("\n>>> no match, partial?",t,p,e,h),p!==a))}if("string"==typeof f?(u=l===f,this.debug("string match",f,l,u)):(u=l.match(f),this.debug("pattern match",f,l,u)),!u)return!1}if(i===a&&s===c)return!0;if(i===a)return r;if(s===c)return i===a-1&&""===t[i];throw new Error("wtf?")}},function(t,e,r){"use strict";function n(t){return"/"===t.charAt(0)}function o(t){var e=/^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/.exec(t),r=e[1]||"",n=Boolean(r&&":"!==r.charAt(1));return Boolean(e[2]||n)}t.exports="win32"===process.platform?o:n,t.exports.posix=n,t.exports.win32=o},function(e,r){e.exports=t},function(t,e){t.exports=require("child_process")},function(t,e){t.exports=require("crypto")},function(t,e,r){t.exports=b;var n=r(21),o=r(15),i=(o.Minimatch,r(41)),s=r(7).EventEmitter,a=r(0),c=r(8),u=r(16),f=r(43),l=r(22),p=l.setopts,h=l.ownProp,d=r(44),m=(r(2),l.childrenIgnored),y=l.isIgnored,g=r(11);function b(t,e,r){if("function"==typeof e&&(r=e,e={}),e||(e={}),e.sync){if(r)throw new TypeError("callback provided to sync glob");return f(t,e)}return new v(t,e,r)}b.sync=f;var w=b.GlobSync=f.GlobSync;function v(t,e,r){if("function"==typeof e&&(r=e,e=null),e&&e.sync){if(r)throw new TypeError("callback provided to sync glob");return new w(t,e)}if(!(this instanceof v))return new v(t,e,r);p(this,t,e),this._didRealPath=!1;var n=this.minimatch.set.length;this.matches=new Array(n),"function"==typeof r&&(r=g(r),this.on("error",r),this.on("end",(function(t){r(null,t)})));var o=this;if(this._processing=0,this._emitQueue=[],this._processQueue=[],this.paused=!1,this.noprocess)return this;if(0===n)return a();for(var i=!0,s=0;s<n;s++)this._process(this.minimatch.set[s],s,!1,a);function a(){--o._processing,o._processing<=0&&(i?process.nextTick((function(){o._finish()})):o._finish())}i=!1}b.glob=b,b.hasMagic=function(t,e){var r=function(t,e){if(null===e||"object"!=typeof e)return t;for(var r=Object.keys(e),n=r.length;n--;)t[r[n]]=e[r[n]];return t}({},e);r.noprocess=!0;var n=new v(t,r).minimatch.set;if(!t)return!1;if(n.length>1)return!0;for(var o=0;o<n[0].length;o++)if("string"!=typeof n[0][o])return!0;return!1},b.Glob=v,i(v,s),v.prototype._finish=function(){if(c(this instanceof v),!this.aborted){if(this.realpath&&!this._didRealpath)return this._realpath();l.finish(this),this.emit("end",this.found)}},v.prototype._realpath=function(){if(!this._didRealpath){this._didRealpath=!0;var t=this.matches.length;if(0===t)return this._finish();for(var e=this,r=0;r<this.matches.length;r++)this._realpathSet(r,n)}function n(){0==--t&&e._finish()}},v.prototype._realpathSet=function(t,e){var r=this.matches[t];if(!r)return e();var o=Object.keys(r),i=this,s=o.length;if(0===s)return e();var a=this.matches[t]=Object.create(null);o.forEach((function(r,o){r=i._makeAbs(r),n.realpath(r,i.realpathCache,(function(n,o){n?"stat"===n.syscall?a[r]=!0:i.emit("error",n):a[o]=!0,0==--s&&(i.matches[t]=a,e())}))}))},v.prototype._mark=function(t){return l.mark(this,t)},v.prototype._makeAbs=function(t){return l.makeAbs(this,t)},v.prototype.abort=function(){this.aborted=!0,this.emit("abort")},v.prototype.pause=function(){this.paused||(this.paused=!0,this.emit("pause"))},v.prototype.resume=function(){if(this.paused){if(this.emit("resume"),this.paused=!1,this._emitQueue.length){var t=this._emitQueue.slice(0);this._emitQueue.length=0;for(var e=0;e<t.length;e++){var r=t[e];this._emitMatch(r[0],r[1])}}if(this._processQueue.length){var n=this._processQueue.slice(0);this._processQueue.length=0;for(e=0;e<n.length;e++){var o=n[e];this._processing--,this._process(o[0],o[1],o[2],o[3])}}}},v.prototype._process=function(t,e,r,n){if(c(this instanceof v),c("function"==typeof n),!this.aborted)if(this._processing++,this.paused)this._processQueue.push([t,e,r,n]);else{for(var i,s=0;"string"==typeof t[s];)s++;switch(s){case t.length:return void this._processSimple(t.join("/"),e,n);case 0:i=null;break;default:i=t.slice(0,s).join("/")}var a,f=t.slice(s);null===i?a=".":u(i)||u(t.map((function(t){return"string"==typeof t?t:"[*]"})).join("/"))?(i&&u(i)||(i="/"+i),a=i):a=i;var l=this._makeAbs(a);if(m(this,a))return n();f[0]===o.GLOBSTAR?this._processGlobStar(i,a,l,f,e,r,n):this._processReaddir(i,a,l,f,e,r,n)}},v.prototype._processReaddir=function(t,e,r,n,o,i,s){var a=this;this._readdir(r,i,(function(c,u){return a._processReaddir2(t,e,r,n,o,i,u,s)}))},v.prototype._processReaddir2=function(t,e,r,n,o,i,s,c){if(!s)return c();for(var u=n[0],f=!!this.minimatch.negate,l=u._glob,p=this.dot||"."===l.charAt(0),h=[],d=0;d<s.length;d++){if("."!==(y=s[d]).charAt(0)||p)(f&&!t?!y.match(u):y.match(u))&&h.push(y)}var m=h.length;if(0===m)return c();if(1===n.length&&!this.mark&&!this.stat){this.matches[o]||(this.matches[o]=Object.create(null));for(d=0;d<m;d++){var y=h[d];t&&(y="/"!==t?t+"/"+y:t+y),"/"!==y.charAt(0)||this.nomount||(y=a.join(this.root,y)),this._emitMatch(o,y)}return c()}n.shift();for(d=0;d<m;d++){y=h[d];t&&(y="/"!==t?t+"/"+y:t+y),this._process([y].concat(n),o,i,c)}c()},v.prototype._emitMatch=function(t,e){if(!this.aborted&&!y(this,e))if(this.paused)this._emitQueue.push([t,e]);else{var r=u(e)?e:this._makeAbs(e);if(this.mark&&(e=this._mark(e)),this.absolute&&(e=r),!this.matches[t][e]){if(this.nodir){var n=this.cache[r];if("DIR"===n||Array.isArray(n))return}this.matches[t][e]=!0;var o=this.statCache[r];o&&this.emit("stat",e,o),this.emit("match",e)}}},v.prototype._readdirInGlobStar=function(t,e){if(!this.aborted){if(this.follow)return this._readdir(t,!1,e);var r=this,n=d("lstat\0"+t,(function(n,o){if(n&&"ENOENT"===n.code)return e();var i=o&&o.isSymbolicLink();r.symlinks[t]=i,i||!o||o.isDirectory()?r._readdir(t,!1,e):(r.cache[t]="FILE",e())}));n&&r.fs.lstat(t,n)}},v.prototype._readdir=function(t,e,r){if(!this.aborted&&(r=d("readdir\0"+t+"\0"+e,r))){if(e&&!h(this.symlinks,t))return this._readdirInGlobStar(t,r);if(h(this.cache,t)){var n=this.cache[t];if(!n||"FILE"===n)return r();if(Array.isArray(n))return r(null,n)}this.fs.readdir(t,function(t,e,r){return function(n,o){n?t._readdirError(e,n,r):t._readdirEntries(e,o,r)}}(this,t,r))}},v.prototype._readdirEntries=function(t,e,r){if(!this.aborted){if(!this.mark&&!this.stat)for(var n=0;n<e.length;n++){var o=e[n];o="/"===t?t+o:t+"/"+o,this.cache[o]=!0}return this.cache[t]=e,r(null,e)}},v.prototype._readdirError=function(t,e,r){if(!this.aborted){switch(e.code){case"ENOTSUP":case"ENOTDIR":var n=this._makeAbs(t);if(this.cache[n]="FILE",n===this.cwdAbs){var o=new Error(e.code+" invalid cwd "+this.cwd);o.path=this.cwd,o.code=e.code,this.emit("error",o),this.abort()}break;case"ENOENT":case"ELOOP":case"ENAMETOOLONG":case"UNKNOWN":this.cache[this._makeAbs(t)]=!1;break;default:this.cache[this._makeAbs(t)]=!1,this.strict&&(this.emit("error",e),this.abort()),this.silent||console.error("glob error",e)}return r()}},v.prototype._processGlobStar=function(t,e,r,n,o,i,s){var a=this;this._readdir(r,i,(function(c,u){a._processGlobStar2(t,e,r,n,o,i,u,s)}))},v.prototype._processGlobStar2=function(t,e,r,n,o,i,s,a){if(!s)return a();var c=n.slice(1),u=t?[t]:[],f=u.concat(c);this._process(f,o,!1,a);var l=this.symlinks[r],p=s.length;if(l&&i)return a();for(var h=0;h<p;h++){if("."!==s[h].charAt(0)||this.dot){var d=u.concat(s[h],c);this._process(d,o,!0,a);var m=u.concat(s[h],n);this._process(m,o,!0,a)}}a()},v.prototype._processSimple=function(t,e,r){var n=this;this._stat(t,(function(o,i){n._processSimple2(t,e,o,i,r)}))},v.prototype._processSimple2=function(t,e,r,n,o){if(this.matches[e]||(this.matches[e]=Object.create(null)),!n)return o();if(t&&u(t)&&!this.nomount){var i=/[\/\\]$/.test(t);"/"===t.charAt(0)?t=a.join(this.root,t):(t=a.resolve(this.root,t),i&&(t+="/"))}"win32"===process.platform&&(t=t.replace(/\\/g,"/")),this._emitMatch(e,t),o()},v.prototype._stat=function(t,e){var r=this._makeAbs(t),n="/"===t.slice(-1);if(t.length>this.maxLength)return e();if(!this.stat&&h(this.cache,r)){var o=this.cache[r];if(Array.isArray(o)&&(o="DIR"),!n||"DIR"===o)return e(null,o);if(n&&"FILE"===o)return e()}var i=this.statCache[r];if(void 0!==i){if(!1===i)return e(null,i);var s=i.isDirectory()?"DIR":"FILE";return n&&"FILE"===s?e():e(null,s,i)}var a=this,c=d("stat\0"+r,(function(n,o){if(o&&o.isSymbolicLink())return a.fs.stat(r,(function(n,i){n?a._stat2(t,r,null,o,e):a._stat2(t,r,n,i,e)}));a._stat2(t,r,n,o,e)}));c&&a.fs.lstat(r,c)},v.prototype._stat2=function(t,e,r,n,o){if(r&&("ENOENT"===r.code||"ENOTDIR"===r.code))return this.statCache[e]=!1,o();var i="/"===t.slice(-1);if(this.statCache[e]=n,"/"===e.slice(-1)&&n&&!n.isDirectory())return o(null,!1,n);var s=!0;return n&&(s=n.isDirectory()?"DIR":"FILE"),this.cache[e]=this.cache[e]||s,i&&"FILE"===s?o():o(null,s,n)}},function(t,e,r){t.exports=f,f.realpath=f,f.sync=l,f.realpathSync=l,f.monkeypatch=function(){n.realpath=f,n.realpathSync=l},f.unmonkeypatch=function(){n.realpath=o,n.realpathSync=i};var n=r(1),o=n.realpath,i=n.realpathSync,s=process.version,a=/^v[0-5]\./.test(s),c=r(37);function u(t){return t&&"realpath"===t.syscall&&("ELOOP"===t.code||"ENOMEM"===t.code||"ENAMETOOLONG"===t.code)}function f(t,e,r){if(a)return o(t,e,r);"function"==typeof e&&(r=e,e=null),o(t,e,(function(n,o){u(n)?c.realpath(t,e,r):r(n,o)}))}function l(t,e){if(a)return i(t,e);try{return i(t,e)}catch(r){if(u(r))return c.realpathSync(t,e);throw r}}},function(t,e,r){function n(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.setopts=function(t,e,r){r||(r={});if(r.matchBase&&-1===e.indexOf("/")){if(r.noglobstar)throw new Error("base matching requires globstar");e="**/"+e}t.silent=!!r.silent,t.pattern=e,t.strict=!1!==r.strict,t.realpath=!!r.realpath,t.realpathCache=r.realpathCache||Object.create(null),t.follow=!!r.follow,t.dot=!!r.dot,t.mark=!!r.mark,t.nodir=!!r.nodir,t.nodir&&(t.mark=!0);t.sync=!!r.sync,t.nounique=!!r.nounique,t.nonull=!!r.nonull,t.nosort=!!r.nosort,t.nocase=!!r.nocase,t.stat=!!r.stat,t.noprocess=!!r.noprocess,t.absolute=!!r.absolute,t.fs=r.fs||o,t.maxLength=r.maxLength||1/0,t.cache=r.cache||Object.create(null),t.statCache=r.statCache||Object.create(null),t.symlinks=r.symlinks||Object.create(null),function(t,e){t.ignore=e.ignore||[],Array.isArray(t.ignore)||(t.ignore=[t.ignore]);t.ignore.length&&(t.ignore=t.ignore.map(f))}(t,r),t.changedCwd=!1;var s=process.cwd();n(r,"cwd")?(t.cwd=i.resolve(r.cwd),t.changedCwd=t.cwd!==s):t.cwd=s;t.root=r.root||i.resolve(t.cwd,"/"),t.root=i.resolve(t.root),"win32"===process.platform&&(t.root=t.root.replace(/\\/g,"/"));t.cwdAbs=a(t.cwd)?t.cwd:l(t,t.cwd),"win32"===process.platform&&(t.cwdAbs=t.cwdAbs.replace(/\\/g,"/"));t.nomount=!!r.nomount,r.nonegate=!0,r.nocomment=!0,r.allowWindowsEscape=!1,t.minimatch=new c(e,r),t.options=t.minimatch.options},e.ownProp=n,e.makeAbs=l,e.finish=function(t){for(var e=t.nounique,r=e?[]:Object.create(null),n=0,o=t.matches.length;n<o;n++){var i=t.matches[n];if(i&&0!==Object.keys(i).length){var s=Object.keys(i);e?r.push.apply(r,s):s.forEach((function(t){r[t]=!0}))}else if(t.nonull){var a=t.minimatch.globSet[n];e?r.push(a):r[a]=!0}}e||(r=Object.keys(r));t.nosort||(r=r.sort(u));if(t.mark){for(n=0;n<r.length;n++)r[n]=t._mark(r[n]);t.nodir&&(r=r.filter((function(e){var r=!/\/$/.test(e),n=t.cache[e]||t.cache[l(t,e)];return r&&n&&(r="DIR"!==n&&!Array.isArray(n)),r})))}t.ignore.length&&(r=r.filter((function(e){return!p(t,e)})));t.found=r},e.mark=function(t,e){var r=l(t,e),n=t.cache[r],o=e;if(n){var i="DIR"===n||Array.isArray(n),s="/"===e.slice(-1);if(i&&!s?o+="/":!i&&s&&(o=o.slice(0,-1)),o!==e){var a=l(t,o);t.statCache[a]=t.statCache[r],t.cache[a]=t.cache[r]}}return o},e.isIgnored=p,e.childrenIgnored=function(t,e){return!!t.ignore.length&&t.ignore.some((function(t){return!(!t.gmatcher||!t.gmatcher.match(e))}))};var o=r(1),i=r(0),s=r(15),a=r(16),c=s.Minimatch;function u(t,e){return t.localeCompare(e,"en")}function f(t){var e=null;if("/**"===t.slice(-3)){var r=t.replace(/(\/\*\*)+$/,"");e=new c(r,{dot:!0})}return{matcher:new c(t,{dot:!0}),gmatcher:e}}function l(t,e){var r=e;return r="/"===e.charAt(0)?i.join(t.root,e):a(e)||""===e?e:t.changedCwd?i.resolve(t.cwd,e):i.resolve(e),"win32"===process.platform&&(r=r.replace(/\\/g,"/")),r}function p(t,e){return!!t.ignore.length&&t.ignore.some((function(t){return t.matcher.match(e)||!(!t.gmatcher||!t.gmatcher.match(e))}))}},function(t,e){t.exports=function t(e,r){if(e&&r)return t(e)(r);if("function"!=typeof e)throw new TypeError("need wrapper function");return Object.keys(e).forEach((function(t){n[t]=e[t]})),n;function n(){for(var t=new Array(arguments.length),r=0;r<t.length;r++)t[r]=arguments[r];var n=e.apply(this,t),o=t[t.length-1];return"function"==typeof n&&n!==o&&Object.keys(o).forEach((function(t){n[t]=o[t]})),n}}},function(t,e,r){var n,o,i=r(1),s=r(46),a=r(48),c=r(49),u=r(2);function f(t,e){Object.defineProperty(t,n,{get:function(){return e}})}"function"==typeof Symbol&&"function"==typeof Symbol.for?(n=Symbol.for("graceful-fs.queue"),o=Symbol.for("graceful-fs.previous")):(n="___graceful-fs.queue",o="___graceful-fs.previous");var l,p=function(){};if(u.debuglog?p=u.debuglog("gfs4"):/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&(p=function(){var t=u.format.apply(u,arguments);t="GFS4: "+t.split(/\n/).join("\nGFS4: "),console.error(t)}),!i[n]){var h=global[n]||[];f(i,h),i.close=function(t){function e(e,r){return t.call(i,e,(function(t){t||y(),"function"==typeof r&&r.apply(this,arguments)}))}return Object.defineProperty(e,o,{value:t}),e}(i.close),i.closeSync=function(t){function e(e){t.apply(i,arguments),y()}return Object.defineProperty(e,o,{value:t}),e}(i.closeSync),/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&process.on("exit",(function(){p(i[n]),r(8).equal(i[n].length,0)}))}function d(t){s(t),t.gracefulify=d,t.createReadStream=function(e,r){return new t.ReadStream(e,r)},t.createWriteStream=function(e,r){return new t.WriteStream(e,r)};var e=t.readFile;t.readFile=function(t,r,n){"function"==typeof r&&(n=r,r=null);return function t(r,n,o,i){return e(r,n,(function(e){!e||"EMFILE"!==e.code&&"ENFILE"!==e.code?"function"==typeof o&&o.apply(this,arguments):m([t,[r,n,o],e,i||Date.now(),Date.now()])}))}(t,r,n)};var r=t.writeFile;t.writeFile=function(t,e,n,o){"function"==typeof n&&(o=n,n=null);return function t(e,n,o,i,s){return r(e,n,o,(function(r){!r||"EMFILE"!==r.code&&"ENFILE"!==r.code?"function"==typeof i&&i.apply(this,arguments):m([t,[e,n,o,i],r,s||Date.now(),Date.now()])}))}(t,e,n,o)};var n=t.appendFile;n&&(t.appendFile=function(t,e,r,o){"function"==typeof r&&(o=r,r=null);return function t(e,r,o,i,s){return n(e,r,o,(function(n){!n||"EMFILE"!==n.code&&"ENFILE"!==n.code?"function"==typeof i&&i.apply(this,arguments):m([t,[e,r,o,i],n,s||Date.now(),Date.now()])}))}(t,e,r,o)});var o=t.copyFile;o&&(t.copyFile=function(t,e,r,n){"function"==typeof r&&(n=r,r=0);return function t(e,r,n,i,s){return o(e,r,n,(function(o){!o||"EMFILE"!==o.code&&"ENFILE"!==o.code?"function"==typeof i&&i.apply(this,arguments):m([t,[e,r,n,i],o,s||Date.now(),Date.now()])}))}(t,e,r,n)});var i=t.readdir;t.readdir=function(t,e,r){"function"==typeof e&&(r=e,e=null);var n=c.test(process.version)?function(t,e,r,n){return i(t,o(t,e,r,n))}:function(t,e,r,n){return i(t,e,o(t,e,r,n))};return n(t,e,r);function o(t,e,r,o){return function(i,s){!i||"EMFILE"!==i.code&&"ENFILE"!==i.code?(s&&s.sort&&s.sort(),"function"==typeof r&&r.call(this,i,s)):m([n,[t,e,r],i,o||Date.now(),Date.now()])}}};var c=/^v[0-5]\./;if("v0.8"===process.version.substr(0,4)){var u=a(t);y=u.ReadStream,g=u.WriteStream}var f=t.ReadStream;f&&(y.prototype=Object.create(f.prototype),y.prototype.open=function(){var t=this;w(t.path,t.flags,t.mode,(function(e,r){e?(t.autoClose&&t.destroy(),t.emit("error",e)):(t.fd=r,t.emit("open",r),t.read())}))});var l=t.WriteStream;l&&(g.prototype=Object.create(l.prototype),g.prototype.open=function(){var t=this;w(t.path,t.flags,t.mode,(function(e,r){e?(t.destroy(),t.emit("error",e)):(t.fd=r,t.emit("open",r))}))}),Object.defineProperty(t,"ReadStream",{get:function(){return y},set:function(t){y=t},enumerable:!0,configurable:!0}),Object.defineProperty(t,"WriteStream",{get:function(){return g},set:function(t){g=t},enumerable:!0,configurable:!0});var p=y;Object.defineProperty(t,"FileReadStream",{get:function(){return p},set:function(t){p=t},enumerable:!0,configurable:!0});var h=g;function y(t,e){return this instanceof y?(f.apply(this,arguments),this):y.apply(Object.create(y.prototype),arguments)}function g(t,e){return this instanceof g?(l.apply(this,arguments),this):g.apply(Object.create(g.prototype),arguments)}Object.defineProperty(t,"FileWriteStream",{get:function(){return h},set:function(t){h=t},enumerable:!0,configurable:!0});var b=t.open;function w(t,e,r,n){return"function"==typeof r&&(n=r,r=null),function t(e,r,n,o,i){return b(e,r,n,(function(s,a){!s||"EMFILE"!==s.code&&"ENFILE"!==s.code?"function"==typeof o&&o.apply(this,arguments):m([t,[e,r,n,o],s,i||Date.now(),Date.now()])}))}(t,e,r,n)}return t.open=w,t}function m(t){p("ENQUEUE",t[0].name,t[1]),i[n].push(t),g()}function y(){for(var t=Date.now(),e=0;e<i[n].length;++e)i[n][e].length>2&&(i[n][e][3]=t,i[n][e][4]=t);g()}function g(){if(clearTimeout(l),l=void 0,0!==i[n].length){var t=i[n].shift(),e=t[0],r=t[1],o=t[2],s=t[3],a=t[4];if(void 0===s)p("RETRY",e.name,r),e.apply(null,r);else if(Date.now()-s>=6e4){p("TIMEOUT",e.name,r);var c=r.pop();"function"==typeof c&&c.call(null,o)}else{var u=Date.now()-a,f=Math.max(a-s,1);u>=Math.min(1.2*f,100)?(p("RETRY",e.name,r),e.apply(null,r.concat([s]))):i[n].push(t)}void 0===l&&(l=setTimeout(g,0))}}global[n]||f(global,i[n]),t.exports=d(c(i)),process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH&&!i.__patched&&(t.exports=d(i),i.__patched=!0)},function(t,e,r){t.exports=function(t){function e(t){let r,o,i,s=null;function a(...t){if(!a.enabled)return;const n=a,o=Number(new Date),i=o-(r||o);n.diff=i,n.prev=r,n.curr=o,r=o,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let s=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((r,o)=>{if("%%"===r)return"%";s++;const i=e.formatters[o];if("function"==typeof i){const e=t[s];r=i.call(n,e),t.splice(s,1),s--}return r})),e.formatArgs.call(n,t);(n.log||e.log).apply(n,t)}return a.namespace=t,a.useColors=e.useColors(),a.color=e.selectColor(t),a.extend=n,a.destroy=e.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(o!==e.namespaces&&(o=e.namespaces,i=e.enabled(t)),i),set:t=>{s=t}}),"function"==typeof e.init&&e.init(a),a}function n(t,r){const n=e(this.namespace+(void 0===r?":":r)+t);return n.log=this.log,n}function o(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){if(t instanceof Error)return t.stack||t.message;return t},e.disable=function(){const t=[...e.names.map(o),...e.skips.map(o).map((t=>"-"+t))].join(",");return e.enable(""),t},e.enable=function(t){let r;e.save(t),e.namespaces=t,e.names=[],e.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(r=0;r<o;r++)n[r]&&("-"===(t=n[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.slice(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let r,n;for(r=0,n=e.skips.length;r<n;r++)if(e.skips[r].test(t))return!1;for(r=0,n=e.names.length;r<n;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=r(58),e.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach((r=>{e[r]=t[r]})),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let r=0;for(let e=0;e<t.length;e++)r=(r<<5)-r+t.charCodeAt(e),r|=0;return e.colors[Math.abs(r)%e.colors.length]},e.enable(e.load()),e}},function(t,e){t.exports=require("tty")},function(t,e){t.exports=require("buffer")},function(t,e,r){const n=r(8),o=r(0),i=r(1);let s;try{s=r(20)}catch(t){}const a={nosort:!0,silent:!0};let c=0;const u="win32"===process.platform,f=t=>{if(["unlink","chmod","stat","lstat","rmdir","readdir"].forEach((e=>{t[e]=t[e]||i[e],t[e+="Sync"]=t[e]||i[e]})),t.maxBusyTries=t.maxBusyTries||3,t.emfileWait=t.emfileWait||1e3,!1===t.glob&&(t.disableGlob=!0),!0!==t.disableGlob&&void 0===s)throw Error("glob dependency not found, set `options.disableGlob = true` if intentional");t.disableGlob=t.disableGlob||!1,t.glob=t.glob||a},l=(t,e,r)=>{"function"==typeof e&&(r=e,e={}),n(t,"rimraf: missing path"),n.equal(typeof t,"string","rimraf: path should be a string"),n.equal(typeof r,"function","rimraf: callback function required"),n(e,"rimraf: invalid options argument provided"),n.equal(typeof e,"object","rimraf: options should be object"),f(e);let o=0,i=null,a=0;const u=(t,n)=>t?r(t):(a=n.length,0===a?r():void n.forEach((t=>{const n=s=>{if(s){if(("EBUSY"===s.code||"ENOTEMPTY"===s.code||"EPERM"===s.code)&&o<e.maxBusyTries)return o++,setTimeout((()=>p(t,e,n)),100*o);if("EMFILE"===s.code&&c<e.emfileWait)return setTimeout((()=>p(t,e,n)),c++);"ENOENT"===s.code&&(s=null)}c=0,(t=>{i=i||t,0==--a&&r(i)})(s)};p(t,e,n)})));if(e.disableGlob||!s.hasMagic(t))return u(null,[t]);e.lstat(t,((r,n)=>{if(!r)return u(null,[t]);s(t,e.glob,u)}))},p=(t,e,r)=>{n(t),n(e),n("function"==typeof r),e.lstat(t,((n,o)=>n&&"ENOENT"===n.code?r(null):(n&&"EPERM"===n.code&&u&&h(t,e,n,r),o&&o.isDirectory()?m(t,e,n,r):void e.unlink(t,(n=>{if(n){if("ENOENT"===n.code)return r(null);if("EPERM"===n.code)return u?h(t,e,n,r):m(t,e,n,r);if("EISDIR"===n.code)return m(t,e,n,r)}return r(n)})))))},h=(t,e,r,o)=>{n(t),n(e),n("function"==typeof o),e.chmod(t,438,(n=>{n?o("ENOENT"===n.code?null:r):e.stat(t,((n,i)=>{n?o("ENOENT"===n.code?null:r):i.isDirectory()?m(t,e,r,o):e.unlink(t,o)}))}))},d=(t,e,r)=>{n(t),n(e);try{e.chmodSync(t,438)}catch(t){if("ENOENT"===t.code)return;throw r}let o;try{o=e.statSync(t)}catch(t){if("ENOENT"===t.code)return;throw r}o.isDirectory()?b(t,e,r):e.unlinkSync(t)},m=(t,e,r,o)=>{n(t),n(e),n("function"==typeof o),e.rmdir(t,(n=>{!n||"ENOTEMPTY"!==n.code&&"EEXIST"!==n.code&&"EPERM"!==n.code?n&&"ENOTDIR"===n.code?o(r):o(n):y(t,e,o)}))},y=(t,e,r)=>{n(t),n(e),n("function"==typeof r),e.readdir(t,((n,i)=>{if(n)return r(n);let s,a=i.length;if(0===a)return e.rmdir(t,r);i.forEach((n=>{l(o.join(t,n),e,(n=>{if(!s)return n?r(s=n):void(0==--a&&e.rmdir(t,r))}))}))}))},g=(t,e)=>{let r;if(f(e=e||{}),n(t,"rimraf: missing path"),n.equal(typeof t,"string","rimraf: path should be a string"),n(e,"rimraf: missing options"),n.equal(typeof e,"object","rimraf: options should be object"),e.disableGlob||!s.hasMagic(t))r=[t];else try{e.lstatSync(t),r=[t]}catch(n){r=s.sync(t,e.glob)}if(r.length)for(let t=0;t<r.length;t++){const n=r[t];let o;try{o=e.lstatSync(n)}catch(t){if("ENOENT"===t.code)return;"EPERM"===t.code&&u&&d(n,e,t)}try{o&&o.isDirectory()?b(n,e,null):e.unlinkSync(n)}catch(t){if("ENOENT"===t.code)return;if("EPERM"===t.code)return u?d(n,e,t):b(n,e,t);if("EISDIR"!==t.code)throw t;b(n,e,t)}}},b=(t,e,r)=>{n(t),n(e);try{e.rmdirSync(t)}catch(n){if("ENOENT"===n.code)return;if("ENOTDIR"===n.code)throw r;"ENOTEMPTY"!==n.code&&"EEXIST"!==n.code&&"EPERM"!==n.code||w(t,e)}},w=(t,e)=>{n(t),n(e),e.readdirSync(t).forEach((r=>g(o.join(t,r),e)));const r=u?100:1;let i=0;for(;;){let n=!0;try{const r=e.rmdirSync(t,e);return n=!1,r}finally{if(++i<r&&n)continue}}};t.exports=l,l.sync=g},function(t,e,r){"use strict";const n=r(45),{toPromise:o,toSync:i,toSyncOptions:s}=r(56);async function a(t,e){const r=await o(n.lock)(t,e);return o(r)}t.exports=a,t.exports.lock=a,t.exports.unlock=function(t,e){return o(n.unlock)(t,e)},t.exports.lockSync=function(t,e){const r=i(n.lock)(t,s(e));return i(r)},t.exports.unlockSync=function(t,e){return i(n.unlock)(t,s(e))},t.exports.check=function(t,e){return o(n.check)(t,e)},t.exports.checkSync=function(t,e){return i(n.check)(t,s(e))}},function(t,e,r){"use strict";r.d(e,"a",(function(){return a}));var n=r(1),o=r.n(n),i=r(4),s=r(2);s.promisify(o.a.readFile.bind(o.a));function a(){if("linux"!==i.platform())return"";try{const t=o.a.readFileSync("/etc/os-release","utf8");return t?c(t):""}catch(t){return""}}function c(t){const e=new Map;for(const r of t.split("\n")){const t=r.split("="),n=t.shift();let o=t.join("=").trim();o.startsWith('"')&&o.endsWith('"')&&(o=o.substring(1,o.length-1)),n&&e.set(n.toLowerCase(),o)}return e.get("name")&&"ubuntu"===e.get("name").toLowerCase()&&e.get("version_id")||""}},function(t,e,r){const n=r(12)("extract-zip"),{createWriteStream:o,promises:i}=r(1),s=r(62),a=r(0),{promisify:c}=r(2),u=r(6),f=r(66),l=c(f.open),p=c(u.pipeline);class h{constructor(t,e){this.zipPath=t,this.opts=e}async extract(){return n("opening",this.zipPath,"with opts",this.opts),this.zipfile=await l(this.zipPath,{lazyEntries:!0}),this.canceled=!1,new Promise(((t,e)=>{this.zipfile.on("error",(t=>{this.canceled=!0,e(t)})),this.zipfile.readEntry(),this.zipfile.on("close",(()=>{this.canceled||(n("zip extraction complete"),t())})),this.zipfile.on("entry",(async t=>{if(this.canceled)return void n("skipping entry",t.fileName,{cancelled:this.canceled});if(n("zipfile entry",t.fileName),t.fileName.startsWith("__MACOSX/"))return void this.zipfile.readEntry();const r=a.dirname(a.join(this.opts.dir,t.fileName));try{await i.mkdir(r,{recursive:!0});const e=await i.realpath(r);if(a.relative(this.opts.dir,e).split(a.sep).includes(".."))throw new Error(`Out of bound path "${e}" found while processing file ${t.fileName}`);await this.extractEntry(t),n("finished processing",t.fileName),this.zipfile.readEntry()}catch(t){this.canceled=!0,this.zipfile.close(),e(t)}}))}))}async extractEntry(t){if(this.canceled)return void n("skipping entry extraction",t.fileName,{cancelled:this.canceled});this.opts.onEntry&&this.opts.onEntry(t,this.zipfile);const e=a.join(this.opts.dir,t.fileName),r=t.externalFileAttributes>>16&65535,u=40960==(61440&r);let f=16384==(61440&r);!f&&t.fileName.endsWith("/")&&(f=!0);const l=t.versionMadeBy>>8;f||(f=0===l&&16===t.externalFileAttributes),n("extracting entry",{filename:t.fileName,isDir:f,isSymlink:u});const h=511&this.getExtractedMode(r,f),d=f?e:a.dirname(e),m={recursive:!0};if(f&&(m.mode=h),n("mkdir",{dir:d,...m}),await i.mkdir(d,m),f)return;n("opening read stream",e);const y=await c(this.zipfile.openReadStream.bind(this.zipfile))(t);if(u){const t=await s(y);n("creating symlink",t,e),await i.symlink(t,e)}else await p(y,o(e,{mode:h}))}getExtractedMode(t,e){let r=t;return 0===r&&(e?(this.opts.defaultDirMode&&(r=parseInt(this.opts.defaultDirMode,10)),r||(r=493)):(this.opts.defaultFileMode&&(r=parseInt(this.opts.defaultFileMode,10)),r||(r=420))),r}}t.exports=async function(t,e){if(n("creating target directory",e.dir),!a.isAbsolute(e.dir))throw new Error("Target directory is expected to be absolute");return await i.mkdir(e.dir,{recursive:!0}),e.dir=await i.realpath(e.dir),new h(t,e).extract()}},function(t,e,r){t.exports=r(71)},function(t,e,r){"use strict";var n=r(9).parse,o={ftp:21,gopher:70,http:80,https:443,ws:80,wss:443},i=String.prototype.endsWith||function(t){return t.length<=this.length&&-1!==this.indexOf(t,this.length-t.length)};function s(t){return process.env[t.toLowerCase()]||process.env[t.toUpperCase()]||""}e.getProxyForUrl=function(t){var e="string"==typeof t?n(t):t||{},r=e.protocol,a=e.host,c=e.port;if("string"!=typeof a||!a||"string"!=typeof r)return"";if(r=r.split(":",1)[0],!function(t,e){var r=(s("npm_config_no_proxy")||s("no_proxy")).toLowerCase();if(!r)return!0;if("*"===r)return!1;return r.split(/[,\s]/).every((function(r){if(!r)return!0;var n=r.match(/^(.+):(\d+)$/),o=n?n[1]:r,s=n?parseInt(n[2]):0;return!(!s||s===e)||(/^[.*]/.test(o)?("*"===o.charAt(0)&&(o=o.slice(1)),!i.call(t,o)):t!==o)}))}(a=a.replace(/:\d*$/,""),c=parseInt(c)||o[r]||0))return"";var u=s("npm_config_"+r+"_proxy")||s(r+"_proxy")||s("npm_config_proxy")||s("all_proxy");return u&&-1===u.indexOf("://")&&(u=r+"://"+u),u}},function(t,e,r){t.exports=r(35)},function(t,e,r){"use strict";r.r(e);var n=r(14);r.d(e,"Installer",(function(){return n.a})),r.d(e,"getPackagedPlaywrightExecPath",(function(){return n.b}))},function(t,e,r){"use strict";r.r(e),function(t){r.d(e,"installBrowsersWithProgressBar",(function(){return O}));var n=r(1),o=r.n(n),i=r(0),s=r.n(i),a=r(2),c=r.n(a),u=r(28),f=r.n(u),l=r(29),p=r.n(l),h=r(3),d=r(13),m=r(5);const y=c.a.promisify(o.a.mkdir.bind(o.a)),g=c.a.promisify(o.a.readdir.bind(o.a)),b=c.a.promisify(o.a.readFile.bind(o.a)),w=t=>b(t).then((()=>!0)).catch((t=>!1)),v=c.a.promisify(o.a.unlink.bind(o.a)),E=c.a.promisify(o.a.writeFile.bind(o.a)),x=c.a.promisify(f.a),_=s.a.join(t,"..","..");async function O(t=h.b){if(Object(m.c)("PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD"))return d.b("Skipping browsers download because `PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD` env variable is set"),!1;await y(h.e,{recursive:!0});const e=s.a.join(h.e,"__dirlock"),r=await p.a.lock(h.e,{retries:{retries:10,factor:1.27579},onCompromised:t=>{throw new Error(`${t.message} Path: ${e}`)},lockfilePath:e}),n=s.a.join(h.e,".links");try{await y(n,{recursive:!0}),await E(s.a.join(n,Object(m.b)(_)),_),await async function(t,e){const r=new Set;for(const e of await g(t)){const n=s.a.join(t,e);let o="";try{o=(await b(n)).toString();const t=new h.a(o);for(const e of h.b){if(!t.shouldDownload(e))continue;const n=t.browserDirectory(e),o=t.revision(e);("chromium"===e&&o>=786218||"firefox"===e&&o>=1128||"webkit"===e&&o>=1307||"firefox"!==e&&"chromium"!==e&&"webkit"!==e)&&!await w(S(n))||r.add(n)}}catch(t){await v(n).catch((t=>{}))}}let n=(await g(h.e)).map((t=>s.a.join(h.e,t)));n=n.filter((t=>Object(h.d)(t)));const o=new Set(n);for(const t of r)o.delete(t);for(const t of o)d.b("Removing unused browser at "+t),await x(t).catch((t=>{}));const i=new h.a(_);for(const t of e)i.shouldDownload(t)&&(await d.a(i,t).catch((e=>{throw new Error(`Failed to download ${t}, caused by\n${e.stack}`)})),await E(S(i.browserDirectory(t)),""))}(n,t)}finally{await r()}}function S(t){return s.a.join(t,"INSTALLATION_COMPLETE")}}.call(this,"/")},function(t,e,r){var n=r(0),o="win32"===process.platform,i=r(1),s=process.env.NODE_DEBUG&&/fs/.test(process.env.NODE_DEBUG);function a(t){return"function"==typeof t?t:function(){var t;if(s){var e=new Error;t=function(t){t&&(e.message=t.message,r(t=e))}}else t=r;return t;function r(t){if(t){if(process.throwDeprecation)throw t;if(!process.noDeprecation){var e="fs: missing callback "+(t.stack||t.message);process.traceDeprecation?console.trace(e):console.error(e)}}}}()}n.normalize;if(o)var c=/(.*?)(?:[\/\\]+|$)/g;else c=/(.*?)(?:[\/]+|$)/g;if(o)var u=/^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;else u=/^[\/]*/;e.realpathSync=function(t,e){if(t=n.resolve(t),e&&Object.prototype.hasOwnProperty.call(e,t))return e[t];var r,s,a,f,l=t,p={},h={};function d(){var e=u.exec(t);r=e[0].length,s=e[0],a=e[0],f="",o&&!h[a]&&(i.lstatSync(a),h[a]=!0)}for(d();r<t.length;){c.lastIndex=r;var m=c.exec(t);if(f=s,s+=m[0],a=f+m[1],r=c.lastIndex,!(h[a]||e&&e[a]===a)){var y;if(e&&Object.prototype.hasOwnProperty.call(e,a))y=e[a];else{var g=i.lstatSync(a);if(!g.isSymbolicLink()){h[a]=!0,e&&(e[a]=a);continue}var b=null;if(!o){var w=g.dev.toString(32)+":"+g.ino.toString(32);p.hasOwnProperty(w)&&(b=p[w])}null===b&&(i.statSync(a),b=i.readlinkSync(a)),y=n.resolve(f,b),e&&(e[a]=y),o||(p[w]=b)}t=n.resolve(y,t.slice(r)),d()}}return e&&(e[l]=t),t},e.realpath=function(t,e,r){if("function"!=typeof r&&(r=a(e),e=null),t=n.resolve(t),e&&Object.prototype.hasOwnProperty.call(e,t))return process.nextTick(r.bind(null,null,e[t]));var s,f,l,p,h=t,d={},m={};function y(){var e=u.exec(t);s=e[0].length,f=e[0],l=e[0],p="",o&&!m[l]?i.lstat(l,(function(t){if(t)return r(t);m[l]=!0,g()})):process.nextTick(g)}function g(){if(s>=t.length)return e&&(e[h]=t),r(null,t);c.lastIndex=s;var n=c.exec(t);return p=f,f+=n[0],l=p+n[1],s=c.lastIndex,m[l]||e&&e[l]===l?process.nextTick(g):e&&Object.prototype.hasOwnProperty.call(e,l)?v(e[l]):i.lstat(l,b)}function b(t,n){if(t)return r(t);if(!n.isSymbolicLink())return m[l]=!0,e&&(e[l]=l),process.nextTick(g);if(!o){var s=n.dev.toString(32)+":"+n.ino.toString(32);if(d.hasOwnProperty(s))return w(null,d[s],l)}i.stat(l,(function(t){if(t)return r(t);i.readlink(l,(function(t,e){o||(d[s]=e),w(t,e)}))}))}function w(t,o,i){if(t)return r(t);var s=n.resolve(p,o);e&&(e[i]=s),v(s)}function v(e){t=n.resolve(e,t.slice(s)),y()}y()}},function(t,e,r){var n=r(39),o=r(40);t.exports=function(t){if(!t)return[];"{}"===t.substr(0,2)&&(t="\\{\\}"+t.substr(2));return g(function(t){return t.split("\\\\").join(i).split("\\{").join(s).split("\\}").join(a).split("\\,").join(c).split("\\.").join(u)}(t),!0).map(l)};var i="\0SLASH"+Math.random()+"\0",s="\0OPEN"+Math.random()+"\0",a="\0CLOSE"+Math.random()+"\0",c="\0COMMA"+Math.random()+"\0",u="\0PERIOD"+Math.random()+"\0";function f(t){return parseInt(t,10)==t?parseInt(t,10):t.charCodeAt(0)}function l(t){return t.split(i).join("\\").split(s).join("{").split(a).join("}").split(c).join(",").split(u).join(".")}function p(t){if(!t)return[""];var e=[],r=o("{","}",t);if(!r)return t.split(",");var n=r.pre,i=r.body,s=r.post,a=n.split(",");a[a.length-1]+="{"+i+"}";var c=p(s);return s.length&&(a[a.length-1]+=c.shift(),a.push.apply(a,c)),e.push.apply(e,a),e}function h(t){return"{"+t+"}"}function d(t){return/^-?0\d/.test(t)}function m(t,e){return t<=e}function y(t,e){return t>=e}function g(t,e){var r=[],i=o("{","}",t);if(!i||/\$$/.test(i.pre))return[t];var s,c=/^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(i.body),u=/^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(i.body),l=c||u,b=i.body.indexOf(",")>=0;if(!l&&!b)return i.post.match(/,.*\}/)?g(t=i.pre+"{"+i.body+a+i.post):[t];if(l)s=i.body.split(/\.\./);else if(1===(s=p(i.body)).length&&1===(s=g(s[0],!1).map(h)).length)return(E=i.post.length?g(i.post,!1):[""]).map((function(t){return i.pre+s[0]+t}));var w,v=i.pre,E=i.post.length?g(i.post,!1):[""];if(l){var x=f(s[0]),_=f(s[1]),O=Math.max(s[0].length,s[1].length),S=3==s.length?Math.abs(f(s[2])):1,C=m;_<x&&(S*=-1,C=y);var k=s.some(d);w=[];for(var T=x;C(T,_);T+=S){var I;if(u)"\\"===(I=String.fromCharCode(T))&&(I="");else if(I=String(T),k){var L=O-I.length;if(L>0){var j=new Array(L+1).join("0");I=T<0?"-"+j+I.slice(1):j+I}}w.push(I)}}else w=n(s,(function(t){return g(t,!1)}));for(var F=0;F<w.length;F++)for(var A=0;A<E.length;A++){var N=v+w[F]+E[A];(!e||l||N)&&r.push(N)}return r}},function(t,e){t.exports=function(t,e){for(var n=[],o=0;o<t.length;o++){var i=e(t[o],o);r(i)?n.push.apply(n,i):n.push(i)}return n};var r=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,r){"use strict";function n(t,e,r){t instanceof RegExp&&(t=o(t,r)),e instanceof RegExp&&(e=o(e,r));var n=i(t,e,r);return n&&{start:n[0],end:n[1],pre:r.slice(0,n[0]),body:r.slice(n[0]+t.length,n[1]),post:r.slice(n[1]+e.length)}}function o(t,e){var r=e.match(t);return r?r[0]:null}function i(t,e,r){var n,o,i,s,a,c=r.indexOf(t),u=r.indexOf(e,c+1),f=c;if(c>=0&&u>0){if(t===e)return[c,u];for(n=[],i=r.length;f>=0&&!a;)f==c?(n.push(f),c=r.indexOf(t,f+1)):1==n.length?a=[n.pop(),u]:((o=n.pop())<i&&(i=o,s=u),u=r.indexOf(e,f+1)),f=c<u&&c>=0?c:u;n.length&&(a=[i,s])}return a}t.exports=n,n.range=i},function(t,e,r){try{var n=r(2);if("function"!=typeof n.inherits)throw"";t.exports=n.inherits}catch(e){t.exports=r(42)}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}}},function(t,e,r){t.exports=h,h.GlobSync=d;var n=r(21),o=r(15),i=(o.Minimatch,r(20).Glob,r(2),r(0)),s=r(8),a=r(16),c=r(22),u=c.setopts,f=c.ownProp,l=c.childrenIgnored,p=c.isIgnored;function h(t,e){if("function"==typeof e||3===arguments.length)throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");return new d(t,e).found}function d(t,e){if(!t)throw new Error("must provide pattern");if("function"==typeof e||3===arguments.length)throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");if(!(this instanceof d))return new d(t,e);if(u(this,t,e),this.noprocess)return this;var r=this.minimatch.set.length;this.matches=new Array(r);for(var n=0;n<r;n++)this._process(this.minimatch.set[n],n,!1);this._finish()}d.prototype._finish=function(){if(s.ok(this instanceof d),this.realpath){var t=this;this.matches.forEach((function(e,r){var o=t.matches[r]=Object.create(null);for(var i in e)try{i=t._makeAbs(i),o[n.realpathSync(i,t.realpathCache)]=!0}catch(e){if("stat"!==e.syscall)throw e;o[t._makeAbs(i)]=!0}}))}c.finish(this)},d.prototype._process=function(t,e,r){s.ok(this instanceof d);for(var n,i=0;"string"==typeof t[i];)i++;switch(i){case t.length:return void this._processSimple(t.join("/"),e);case 0:n=null;break;default:n=t.slice(0,i).join("/")}var c,u=t.slice(i);null===n?c=".":a(n)||a(t.map((function(t){return"string"==typeof t?t:"[*]"})).join("/"))?(n&&a(n)||(n="/"+n),c=n):c=n;var f=this._makeAbs(c);l(this,c)||(u[0]===o.GLOBSTAR?this._processGlobStar(n,c,f,u,e,r):this._processReaddir(n,c,f,u,e,r))},d.prototype._processReaddir=function(t,e,r,n,o,s){var a=this._readdir(r,s);if(a){for(var c=n[0],u=!!this.minimatch.negate,f=c._glob,l=this.dot||"."===f.charAt(0),p=[],h=0;h<a.length;h++){if("."!==(y=a[h]).charAt(0)||l)(u&&!t?!y.match(c):y.match(c))&&p.push(y)}var d=p.length;if(0!==d)if(1!==n.length||this.mark||this.stat){n.shift();for(h=0;h<d;h++){var m;y=p[h];m=t?[t,y]:[y],this._process(m.concat(n),o,s)}}else{this.matches[o]||(this.matches[o]=Object.create(null));for(var h=0;h<d;h++){var y=p[h];t&&(y="/"!==t.slice(-1)?t+"/"+y:t+y),"/"!==y.charAt(0)||this.nomount||(y=i.join(this.root,y)),this._emitMatch(o,y)}}}},d.prototype._emitMatch=function(t,e){if(!p(this,e)){var r=this._makeAbs(e);if(this.mark&&(e=this._mark(e)),this.absolute&&(e=r),!this.matches[t][e]){if(this.nodir){var n=this.cache[r];if("DIR"===n||Array.isArray(n))return}this.matches[t][e]=!0,this.stat&&this._stat(e)}}},d.prototype._readdirInGlobStar=function(t){if(this.follow)return this._readdir(t,!1);var e,r;try{r=this.fs.lstatSync(t)}catch(t){if("ENOENT"===t.code)return null}var n=r&&r.isSymbolicLink();return this.symlinks[t]=n,n||!r||r.isDirectory()?e=this._readdir(t,!1):this.cache[t]="FILE",e},d.prototype._readdir=function(t,e){if(e&&!f(this.symlinks,t))return this._readdirInGlobStar(t);if(f(this.cache,t)){var r=this.cache[t];if(!r||"FILE"===r)return null;if(Array.isArray(r))return r}try{return this._readdirEntries(t,this.fs.readdirSync(t))}catch(e){return this._readdirError(t,e),null}},d.prototype._readdirEntries=function(t,e){if(!this.mark&&!this.stat)for(var r=0;r<e.length;r++){var n=e[r];n="/"===t?t+n:t+"/"+n,this.cache[n]=!0}return this.cache[t]=e,e},d.prototype._readdirError=function(t,e){switch(e.code){case"ENOTSUP":case"ENOTDIR":var r=this._makeAbs(t);if(this.cache[r]="FILE",r===this.cwdAbs){var n=new Error(e.code+" invalid cwd "+this.cwd);throw n.path=this.cwd,n.code=e.code,n}break;case"ENOENT":case"ELOOP":case"ENAMETOOLONG":case"UNKNOWN":this.cache[this._makeAbs(t)]=!1;break;default:if(this.cache[this._makeAbs(t)]=!1,this.strict)throw e;this.silent||console.error("glob error",e)}},d.prototype._processGlobStar=function(t,e,r,n,o,i){var s=this._readdir(r,i);if(s){var a=n.slice(1),c=t?[t]:[],u=c.concat(a);this._process(u,o,!1);var f=s.length;if(!this.symlinks[r]||!i)for(var l=0;l<f;l++){if("."!==s[l].charAt(0)||this.dot){var p=c.concat(s[l],a);this._process(p,o,!0);var h=c.concat(s[l],n);this._process(h,o,!0)}}}},d.prototype._processSimple=function(t,e){var r=this._stat(t);if(this.matches[e]||(this.matches[e]=Object.create(null)),r){if(t&&a(t)&&!this.nomount){var n=/[\/\\]$/.test(t);"/"===t.charAt(0)?t=i.join(this.root,t):(t=i.resolve(this.root,t),n&&(t+="/"))}"win32"===process.platform&&(t=t.replace(/\\/g,"/")),this._emitMatch(e,t)}},d.prototype._stat=function(t){var e=this._makeAbs(t),r="/"===t.slice(-1);if(t.length>this.maxLength)return!1;if(!this.stat&&f(this.cache,e)){var n=this.cache[e];if(Array.isArray(n)&&(n="DIR"),!r||"DIR"===n)return n;if(r&&"FILE"===n)return!1}var o=this.statCache[e];if(!o){var i;try{i=this.fs.lstatSync(e)}catch(t){if(t&&("ENOENT"===t.code||"ENOTDIR"===t.code))return this.statCache[e]=!1,!1}if(i&&i.isSymbolicLink())try{o=this.fs.statSync(e)}catch(t){o=i}else o=i}this.statCache[e]=o;n=!0;return o&&(n=o.isDirectory()?"DIR":"FILE"),this.cache[e]=this.cache[e]||n,(!r||"FILE"!==n)&&n},d.prototype._mark=function(t){return c.mark(this,t)},d.prototype._makeAbs=function(t){return c.makeAbs(this,t)}},function(t,e,r){var n=r(23),o=Object.create(null),i=r(11);t.exports=n((function(t,e){return o[t]?(o[t].push(e),null):(o[t]=[e],function(t){return i((function e(){var r=o[t],n=r.length,i=function(t){for(var e=t.length,r=[],n=0;n<e;n++)r[n]=t[n];return r}(arguments);try{for(var s=0;s<n;s++)r[s].apply(null,i)}finally{r.length>n?(r.splice(0,n),process.nextTick((function(){e.apply(null,i)}))):delete o[t]}}))}(t))}))},function(t,e,r){"use strict";const n=r(0),o=r(24),i=r(50),s=r(53),a=r(55),c={};function u(t,e){return e.lockfilePath||`${t}.lock`}function f(t,e,r){if(!e.realpath)return r(null,n.resolve(t));e.fs.realpath(t,r)}function l(t,e,r){const n=u(t,e);e.fs.mkdir(n,(o=>o?"EEXIST"!==o.code?r(o):e.stale<=0?r(Object.assign(new Error("Lock file is already being held"),{code:"ELOCKED",file:t})):void e.fs.stat(n,((n,o)=>n?"ENOENT"===n.code?l(t,{...e,stale:0},r):r(n):p(o,e)?void h(t,e,(n=>{if(n)return r(n);l(t,{...e,stale:0},r)})):r(Object.assign(new Error("Lock file is already being held"),{code:"ELOCKED",file:t})))):a.probe(n,e.fs,((t,o,i)=>{if(t)return e.fs.rmdir(n,(()=>{})),r(t);r(null,o,i)}))))}function p(t,e){return t.mtime.getTime()<Date.now()-e.stale}function h(t,e,r){e.fs.rmdir(u(t,e),(t=>{if(t&&"ENOENT"!==t.code)return r(t);r()}))}function d(t,e){const r=c[t];r.updateTimeout||(r.updateDelay=r.updateDelay||e.update,r.updateTimeout=setTimeout((()=>{r.updateTimeout=null,e.fs.stat(r.lockfilePath,((n,o)=>{const i=r.lastUpdate+e.stale<Date.now();if(n)return"ENOENT"===n.code||i?m(t,r,Object.assign(n,{code:"ECOMPROMISED"})):(r.updateDelay=1e3,d(t,e));if(!(r.mtime.getTime()===o.mtime.getTime()))return m(t,r,Object.assign(new Error("Unable to update lock within the stale threshold"),{code:"ECOMPROMISED"}));const s=a.getMtime(r.mtimePrecision);e.fs.utimes(r.lockfilePath,s,s,(n=>{const o=r.lastUpdate+e.stale<Date.now();if(!r.released){if(n)return"ENOENT"===n.code||o?m(t,r,Object.assign(n,{code:"ECOMPROMISED"})):(r.updateDelay=1e3,d(t,e));r.mtime=s,r.lastUpdate=Date.now(),r.updateDelay=null,d(t,e)}}))}))}),r.updateDelay),r.updateTimeout.unref&&r.updateTimeout.unref())}function m(t,e,r){e.released=!0,e.updateTimeout&&clearTimeout(e.updateTimeout),c[t]===e&&delete c[t],e.options.onCompromised(r)}function y(t,e,r){f(t,e={fs:o,realpath:!0,...e},((t,n)=>{if(t)return r(t);const o=c[n];if(!o)return r(Object.assign(new Error("Lock is not acquired/owned by you"),{code:"ENOTACQUIRED"}));o.updateTimeout&&clearTimeout(o.updateTimeout),o.released=!0,delete c[n],h(n,e,r)}))}s((()=>{for(const t in c){const e=c[t].options;try{e.fs.rmdirSync(u(t,e))}catch(t){}}})),t.exports.lock=function(t,e,r){(e={stale:1e4,update:null,realpath:!0,retries:0,fs:o,onCompromised:t=>{throw t},...e}).retries=e.retries||0,e.retries="number"==typeof e.retries?{retries:e.retries}:e.retries,e.stale=Math.max(e.stale||0,2e3),e.update=null==e.update?e.stale/2:e.update||0,e.update=Math.max(Math.min(e.update,e.stale/2),1e3),f(t,e,((t,n)=>{if(t)return r(t);const o=i.operation(e.retries);o.attempt((()=>{l(n,e,((t,i,s)=>{if(o.retry(t))return;if(t)return r(o.mainError());const a=c[n]={lockfilePath:u(n,e),mtime:i,mtimePrecision:s,options:e,lastUpdate:Date.now()};d(n,e),r(null,(t=>{if(a.released)return t&&t(Object.assign(new Error("Lock is already released"),{code:"ERELEASED"}));y(n,{...e,realpath:!1},t)}))}))}))}))},t.exports.unlock=y,t.exports.check=function(t,e,r){(e={stale:1e4,realpath:!0,fs:o,...e}).stale=Math.max(e.stale||0,2e3),f(t,e,((t,n)=>{if(t)return r(t);e.fs.stat(u(n,e),((t,n)=>t?"ENOENT"===t.code?r(null,!1):r(t):r(null,!p(n,e))))}))},t.exports.getLocks=function(){return c}},function(t,e,r){var n=r(47),o=process.cwd,i=null,s=process.env.GRACEFUL_FS_PLATFORM||process.platform;process.cwd=function(){return i||(i=o.call(process)),i};try{process.cwd()}catch(t){}if("function"==typeof process.chdir){var a=process.chdir;process.chdir=function(t){i=null,a.call(process,t)},Object.setPrototypeOf&&Object.setPrototypeOf(process.chdir,a)}t.exports=function(t){n.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&function(t){t.lchmod=function(e,r,o){t.open(e,n.O_WRONLY|n.O_SYMLINK,r,(function(e,n){e?o&&o(e):t.fchmod(n,r,(function(e){t.close(n,(function(t){o&&o(e||t)}))}))}))},t.lchmodSync=function(e,r){var o,i=t.openSync(e,n.O_WRONLY|n.O_SYMLINK,r),s=!0;try{o=t.fchmodSync(i,r),s=!1}finally{if(s)try{t.closeSync(i)}catch(t){}else t.closeSync(i)}return o}}(t);t.lutimes||function(t){n.hasOwnProperty("O_SYMLINK")&&t.futimes?(t.lutimes=function(e,r,o,i){t.open(e,n.O_SYMLINK,(function(e,n){e?i&&i(e):t.futimes(n,r,o,(function(e){t.close(n,(function(t){i&&i(e||t)}))}))}))},t.lutimesSync=function(e,r,o){var i,s=t.openSync(e,n.O_SYMLINK),a=!0;try{i=t.futimesSync(s,r,o),a=!1}finally{if(a)try{t.closeSync(s)}catch(t){}else t.closeSync(s)}return i}):t.futimes&&(t.lutimes=function(t,e,r,n){n&&process.nextTick(n)},t.lutimesSync=function(){})}(t);t.chown=o(t.chown),t.fchown=o(t.fchown),t.lchown=o(t.lchown),t.chmod=e(t.chmod),t.fchmod=e(t.fchmod),t.lchmod=e(t.lchmod),t.chownSync=i(t.chownSync),t.fchownSync=i(t.fchownSync),t.lchownSync=i(t.lchownSync),t.chmodSync=r(t.chmodSync),t.fchmodSync=r(t.fchmodSync),t.lchmodSync=r(t.lchmodSync),t.stat=a(t.stat),t.fstat=a(t.fstat),t.lstat=a(t.lstat),t.statSync=c(t.statSync),t.fstatSync=c(t.fstatSync),t.lstatSync=c(t.lstatSync),t.chmod&&!t.lchmod&&(t.lchmod=function(t,e,r){r&&process.nextTick(r)},t.lchmodSync=function(){});t.chown&&!t.lchown&&(t.lchown=function(t,e,r,n){n&&process.nextTick(n)},t.lchownSync=function(){});"win32"===s&&(t.rename="function"!=typeof t.rename?t.rename:function(e){function r(r,n,o){var i=Date.now(),s=0;e(r,n,(function a(c){if(c&&("EACCES"===c.code||"EPERM"===c.code||"EBUSY"===c.code)&&Date.now()-i<6e4)return setTimeout((function(){t.stat(n,(function(t,i){t&&"ENOENT"===t.code?e(r,n,a):o(c)}))}),s),void(s<100&&(s+=10));o&&o(c)}))}return Object.setPrototypeOf&&Object.setPrototypeOf(r,e),r}(t.rename));function e(e){return e?function(r,n,o){return e.call(t,r,n,(function(t){u(t)&&(t=null),o&&o.apply(this,arguments)}))}:e}function r(e){return e?function(r,n){try{return e.call(t,r,n)}catch(t){if(!u(t))throw t}}:e}function o(e){return e?function(r,n,o,i){return e.call(t,r,n,o,(function(t){u(t)&&(t=null),i&&i.apply(this,arguments)}))}:e}function i(e){return e?function(r,n,o){try{return e.call(t,r,n,o)}catch(t){if(!u(t))throw t}}:e}function a(e){return e?function(r,n,o){function i(t,e){e&&(e.uid<0&&(e.uid+=4294967296),e.gid<0&&(e.gid+=4294967296)),o&&o.apply(this,arguments)}return"function"==typeof n&&(o=n,n=null),n?e.call(t,r,n,i):e.call(t,r,i)}:e}function c(e){return e?function(r,n){var o=n?e.call(t,r,n):e.call(t,r);return o&&(o.uid<0&&(o.uid+=4294967296),o.gid<0&&(o.gid+=4294967296)),o}:e}function u(t){return!t||("ENOSYS"===t.code||!(process.getuid&&0===process.getuid()||"EINVAL"!==t.code&&"EPERM"!==t.code))}t.read="function"!=typeof t.read?t.read:function(e){function r(r,n,o,i,s,a){var c;if(a&&"function"==typeof a){var u=0;c=function(f,l,p){if(f&&"EAGAIN"===f.code&&u<10)return u++,e.call(t,r,n,o,i,s,c);a.apply(this,arguments)}}return e.call(t,r,n,o,i,s,c)}return Object.setPrototypeOf&&Object.setPrototypeOf(r,e),r}(t.read),t.readSync="function"!=typeof t.readSync?t.readSync:(f=t.readSync,function(e,r,n,o,i){for(var s=0;;)try{return f.call(t,e,r,n,o,i)}catch(t){if("EAGAIN"===t.code&&s<10){s++;continue}throw t}});var f}},function(t,e){t.exports=require("constants")},function(t,e,r){var n=r(6).Stream;t.exports=function(t){return{ReadStream:function e(r,o){if(!(this instanceof e))return new e(r,o);n.call(this);var i=this;this.path=r,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=65536,o=o||{};for(var s=Object.keys(o),a=0,c=s.length;a<c;a++){var u=s[a];this[u]=o[u]}this.encoding&&this.setEncoding(this.encoding);if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}if(null!==this.fd)return void process.nextTick((function(){i._read()}));t.open(this.path,this.flags,this.mode,(function(t,e){if(t)return i.emit("error",t),void(i.readable=!1);i.fd=e,i.emit("open",e),i._read()}))},WriteStream:function e(r,o){if(!(this instanceof e))return new e(r,o);n.call(this),this.path=r,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,o=o||{};for(var i=Object.keys(o),s=0,a=i.length;s<a;s++){var c=i[s];this[c]=o[c]}if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],null===this.fd&&(this._open=t.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}}},function(t,e,r){"use strict";t.exports=function(t){if(null===t||"object"!=typeof t)return t;if(t instanceof Object)var e={__proto__:n(t)};else e=Object.create(null);return Object.getOwnPropertyNames(t).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e};var n=Object.getPrototypeOf||function(t){return t.__proto__}},function(t,e,r){t.exports=r(51)},function(t,e,r){var n=r(52);e.operation=function(t){var r=e.timeouts(t);return new n(r,{forever:t&&t.forever,unref:t&&t.unref,maxRetryTime:t&&t.maxRetryTime})},e.timeouts=function(t){if(t instanceof Array)return[].concat(t);var e={retries:10,factor:2,minTimeout:1e3,maxTimeout:1/0,randomize:!1};for(var r in t)e[r]=t[r];if(e.minTimeout>e.maxTimeout)throw new Error("minTimeout is greater than maxTimeout");for(var n=[],o=0;o<e.retries;o++)n.push(this.createTimeout(o,e));return t&&t.forever&&!n.length&&n.push(this.createTimeout(o,e)),n.sort((function(t,e){return t-e})),n},e.createTimeout=function(t,e){var r=e.randomize?Math.random()+1:1,n=Math.round(r*e.minTimeout*Math.pow(e.factor,t));return n=Math.min(n,e.maxTimeout)},e.wrap=function(t,r,n){if(r instanceof Array&&(n=r,r=null),!n)for(var o in n=[],t)"function"==typeof t[o]&&n.push(o);for(var i=0;i<n.length;i++){var s=n[i],a=t[s];t[s]=function(n){var o=e.operation(r),i=Array.prototype.slice.call(arguments,1),s=i.pop();i.push((function(t){o.retry(t)||(t&&(arguments[0]=o.mainError()),s.apply(this,arguments))})),o.attempt((function(){n.apply(t,i)}))}.bind(t,a),t[s].options=r}}},function(t,e){function r(t,e){"boolean"==typeof e&&(e={forever:e}),this._originalTimeouts=JSON.parse(JSON.stringify(t)),this._timeouts=t,this._options=e||{},this._maxRetryTime=e&&e.maxRetryTime||1/0,this._fn=null,this._errors=[],this._attempts=1,this._operationTimeout=null,this._operationTimeoutCb=null,this._timeout=null,this._operationStart=null,this._options.forever&&(this._cachedTimeouts=this._timeouts.slice(0))}t.exports=r,r.prototype.reset=function(){this._attempts=1,this._timeouts=this._originalTimeouts},r.prototype.stop=function(){this._timeout&&clearTimeout(this._timeout),this._timeouts=[],this._cachedTimeouts=null},r.prototype.retry=function(t){if(this._timeout&&clearTimeout(this._timeout),!t)return!1;var e=(new Date).getTime();if(t&&e-this._operationStart>=this._maxRetryTime)return this._errors.unshift(new Error("RetryOperation timeout occurred")),!1;this._errors.push(t);var r=this._timeouts.shift();if(void 0===r){if(!this._cachedTimeouts)return!1;this._errors.splice(this._errors.length-1,this._errors.length),this._timeouts=this._cachedTimeouts.slice(0),r=this._timeouts.shift()}var n=this,o=setTimeout((function(){n._attempts++,n._operationTimeoutCb&&(n._timeout=setTimeout((function(){n._operationTimeoutCb(n._attempts)}),n._operationTimeout),n._options.unref&&n._timeout.unref()),n._fn(n._attempts)}),r);return this._options.unref&&o.unref(),!0},r.prototype.attempt=function(t,e){this._fn=t,e&&(e.timeout&&(this._operationTimeout=e.timeout),e.cb&&(this._operationTimeoutCb=e.cb));var r=this;this._operationTimeoutCb&&(this._timeout=setTimeout((function(){r._operationTimeoutCb()}),r._operationTimeout)),this._operationStart=(new Date).getTime(),this._fn(this._attempts)},r.prototype.try=function(t){console.log("Using RetryOperation.try() is deprecated"),this.attempt(t)},r.prototype.start=function(t){console.log("Using RetryOperation.start() is deprecated"),this.attempt(t)},r.prototype.start=r.prototype.try,r.prototype.errors=function(){return this._errors},r.prototype.attempts=function(){return this._attempts},r.prototype.mainError=function(){if(0===this._errors.length)return null;for(var t={},e=null,r=0,n=0;n<this._errors.length;n++){var o=this._errors[n],i=o.message,s=(t[i]||0)+1;t[i]=s,s>=r&&(e=o,r=s)}return e}},function(t,e,r){var n=global.process;const o=function(t){return t&&"object"==typeof t&&"function"==typeof t.removeListener&&"function"==typeof t.emit&&"function"==typeof t.reallyExit&&"function"==typeof t.listeners&&"function"==typeof t.kill&&"number"==typeof t.pid&&"function"==typeof t.on};if(o(n)){var i,s=r(8),a=r(54),c=/^win/i.test(n.platform),u=r(7);"function"!=typeof u&&(u=u.EventEmitter),n.__signal_exit_emitter__?i=n.__signal_exit_emitter__:((i=n.__signal_exit_emitter__=new u).count=0,i.emitted={}),i.infinite||(i.setMaxListeners(1/0),i.infinite=!0),t.exports=function(t,e){if(!o(global.process))return function(){};s.equal(typeof t,"function","a callback must be provided for exit handler"),!1===h&&d();var r="exit";e&&e.alwaysLast&&(r="afterexit");return i.on(r,t),function(){i.removeListener(r,t),0===i.listeners("exit").length&&0===i.listeners("afterexit").length&&f()}};var f=function(){h&&o(global.process)&&(h=!1,a.forEach((function(t){try{n.removeListener(t,p[t])}catch(t){}})),n.emit=g,n.reallyExit=m,i.count-=1)};t.exports.unload=f;var l=function(t,e,r){i.emitted[t]||(i.emitted[t]=!0,i.emit(t,e,r))},p={};a.forEach((function(t){p[t]=function(){o(global.process)&&(n.listeners(t).length===i.count&&(f(),l("exit",null,t),l("afterexit",null,t),c&&"SIGHUP"===t&&(t="SIGINT"),n.kill(n.pid,t)))}})),t.exports.signals=function(){return a};var h=!1,d=function(){!h&&o(global.process)&&(h=!0,i.count+=1,a=a.filter((function(t){try{return n.on(t,p[t]),!0}catch(t){return!1}})),n.emit=b,n.reallyExit=y)};t.exports.load=d;var m=n.reallyExit,y=function(t){o(global.process)&&(n.exitCode=t||0,l("exit",n.exitCode,null),l("afterexit",n.exitCode,null),m.call(n,n.exitCode))},g=n.emit,b=function(t,e){if("exit"===t&&o(global.process)){void 0!==e&&(n.exitCode=e);var r=g.apply(this,arguments);return l("exit",n.exitCode,null),l("afterexit",n.exitCode,null),r}return g.apply(this,arguments)}}else t.exports=function(){return function(){}}},function(t,e){t.exports=["SIGABRT","SIGALRM","SIGHUP","SIGINT","SIGTERM"],"win32"!==process.platform&&t.exports.push("SIGVTALRM","SIGXCPU","SIGXFSZ","SIGUSR2","SIGTRAP","SIGSYS","SIGQUIT","SIGIOT"),"linux"===process.platform&&t.exports.push("SIGIO","SIGPOLL","SIGPWR","SIGSTKFLT","SIGUNUSED")},function(t,e,r){"use strict";const n=Symbol();t.exports.probe=function(t,e,r){const o=e[n];if(o)return e.stat(t,((t,e)=>{if(t)return r(t);r(null,e.mtime,o)}));const i=new Date(1e3*Math.ceil(Date.now()/1e3)+5);e.utimes(t,i,i,(o=>{if(o)return r(o);e.stat(t,((t,o)=>{if(t)return r(t);const i=o.mtime.getTime()%1e3==0?"s":"ms";Object.defineProperty(e,n,{value:i}),r(null,o.mtime,i)}))}))},t.exports.getMtime=function(t){let e=Date.now();return"s"===t&&(e=1e3*Math.ceil(e/1e3)),new Date(e)}},function(t,e,r){"use strict";const n=r(24);t.exports={toPromise:function(t){return(...e)=>new Promise(((r,n)=>{e.push(((t,e)=>{t?n(t):r(e)})),t(...e)}))},toSync:function(t){return(...e)=>{let r,n;if(e.push(((t,e)=>{r=t,n=e})),t(...e),r)throw r;return n}},toSyncOptions:function(t){if((t={...t}).fs=function(t){const e={...t};return["mkdir","realpath","stat","rmdir","utimes"].forEach((r=>{e[r]=(...e)=>{const n=e.pop();let o;try{o=t[`${r}Sync`](...e)}catch(t){return n(t)}n(null,o)}})),e}(t.fs||n),"number"==typeof t.retries&&t.retries>0||t.retries&&"number"==typeof t.retries.retries&&t.retries.retries>0)throw Object.assign(new Error("Cannot use retries with the sync api"),{code:"ESYNC"});return t}}},function(t,e,r){e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;e.splice(1,0,r,"color: inherit");let n=0,o=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(n++,"%c"===t&&(o=n))})),e.splice(o,0,r)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&"undefined"!=typeof process&&"env"in process&&(t=process.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=console.debug||console.log||(()=>{}),t.exports=r(25)(e);const{formatters:n}=t.exports;n.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},function(t,e){var r=1e3,n=60*r,o=60*n,i=24*o,s=7*i,a=365.25*i;function c(t,e,r,n){var o=e>=1.5*r;return Math.round(t/r)+" "+n+(o?"s":"")}t.exports=function(t,e){e=e||{};var u=typeof t;if("string"===u&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var c=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return c*a;case"weeks":case"week":case"w":return c*s;case"days":case"day":case"d":return c*i;case"hours":case"hour":case"hrs":case"hr":case"h":return c*o;case"minutes":case"minute":case"mins":case"min":case"m":return c*n;case"seconds":case"second":case"secs":case"sec":case"s":return c*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return c;default:return}}(t);if("number"===u&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=i)return c(t,e,i,"day");if(e>=o)return c(t,e,o,"hour");if(e>=n)return c(t,e,n,"minute");if(e>=r)return c(t,e,r,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=i)return Math.round(t/i)+"d";if(e>=o)return Math.round(t/o)+"h";if(e>=n)return Math.round(t/n)+"m";if(e>=r)return Math.round(t/r)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,r){const n=r(26),o=r(2);e.init=function(t){t.inspectOpts={};const r=Object.keys(e.inspectOpts);for(let n=0;n<r.length;n++)t.inspectOpts[r[n]]=e.inspectOpts[r[n]]},e.log=function(...t){return process.stderr.write(o.format(...t)+"\n")},e.formatArgs=function(r){const{namespace:n,useColors:o}=this;if(o){const e=this.color,o="[3"+(e<8?e:"8;5;"+e),i=`  ${o};1m${n} [0m`;r[0]=i+r[0].split("\n").join("\n"+i),r.push(o+"m+"+t.exports.humanize(this.diff)+"[0m")}else r[0]=function(){if(e.inspectOpts.hideDate)return"";return(new Date).toISOString()+" "}()+n+" "+r[0]},e.save=function(t){t?process.env.DEBUG=t:delete process.env.DEBUG},e.load=function(){return process.env.DEBUG},e.useColors=function(){return"colors"in e.inspectOpts?Boolean(e.inspectOpts.colors):n.isatty(process.stderr.fd)},e.destroy=o.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),e.colors=[6,2,3,4,5,1];try{const t=r(60);t&&(t.stderr||t).level>=2&&(e.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221])}catch(t){}e.inspectOpts=Object.keys(process.env).filter((t=>/^debug_/i.test(t))).reduce(((t,e)=>{const r=e.substring(6).toLowerCase().replace(/_([a-z])/g,((t,e)=>e.toUpperCase()));let n=process.env[e];return n=!!/^(yes|on|true|enabled)$/i.test(n)||!/^(no|off|false|disabled)$/i.test(n)&&("null"===n?null:Number(n)),t[r]=n,t}),{}),t.exports=r(25)(e);const{formatters:i}=t.exports;i.o=function(t){return this.inspectOpts.colors=this.useColors,o.inspect(t,this.inspectOpts).split("\n").map((t=>t.trim())).join(" ")},i.O=function(t){return this.inspectOpts.colors=this.useColors,o.inspect(t,this.inspectOpts)}},function(t,e,r){"use strict";const n=r(4),o=r(26),i=r(61),{env:s}=process;let a;function c(t){return 0!==t&&{level:t,hasBasic:!0,has256:t>=2,has16m:t>=3}}function u(t,e){if(0===a)return 0;if(i("color=16m")||i("color=full")||i("color=truecolor"))return 3;if(i("color=256"))return 2;if(t&&!e&&void 0===a)return 0;const r=a||0;if("dumb"===s.TERM)return r;if("win32"===process.platform){const t=n.release().split(".");return Number(t[0])>=10&&Number(t[2])>=10586?Number(t[2])>=14931?3:2:1}if("CI"in s)return["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE"].some((t=>t in s))||"codeship"===s.CI_NAME?1:r;if("TEAMCITY_VERSION"in s)return/^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(s.TEAMCITY_VERSION)?1:0;if("truecolor"===s.COLORTERM)return 3;if("TERM_PROGRAM"in s){const t=parseInt((s.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(s.TERM_PROGRAM){case"iTerm.app":return t>=3?3:2;case"Apple_Terminal":return 2}}return/-256(color)?$/i.test(s.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(s.TERM)||"COLORTERM"in s?1:r}i("no-color")||i("no-colors")||i("color=false")||i("color=never")?a=0:(i("color")||i("colors")||i("color=true")||i("color=always"))&&(a=1),"FORCE_COLOR"in s&&(a="true"===s.FORCE_COLOR?1:"false"===s.FORCE_COLOR?0:0===s.FORCE_COLOR.length?1:Math.min(parseInt(s.FORCE_COLOR,10),3)),t.exports={supportsColor:function(t){return c(u(t,t&&t.isTTY))},stdout:c(u(!0,o.isatty(1))),stderr:c(u(!0,o.isatty(2)))}},function(t,e,r){"use strict";t.exports=(t,e=process.argv)=>{const r=t.startsWith("-")?"":1===t.length?"-":"--",n=e.indexOf(r+t),o=e.indexOf("--");return-1!==n&&(-1===o||n<o)}},function(t,e,r){"use strict";const{constants:n}=r(27),o=r(63),i=r(65);class s extends Error{constructor(){super("maxBuffer exceeded"),this.name="MaxBufferError"}}async function a(t,e){if(!t)return Promise.reject(new Error("Expected a stream"));e={maxBuffer:1/0,...e};const{maxBuffer:r}=e;let a;return await new Promise(((c,u)=>{const f=t=>{t&&a.getBufferedLength()<=n.MAX_LENGTH&&(t.bufferedData=a.getBufferedValue()),u(t)};a=o(t,i(e),(t=>{t?f(t):c()})),a.on("data",(()=>{a.getBufferedLength()>r&&f(new s)}))})),a.getBufferedValue()}t.exports=a,t.exports.default=a,t.exports.buffer=(t,e)=>a(t,{...e,encoding:"buffer"}),t.exports.array=(t,e)=>a(t,{...e,array:!0}),t.exports.MaxBufferError=s},function(t,e,r){var n=r(11),o=r(64),i=r(1),s=function(){},a=/^v?\.0/.test(process.version),c=function(t){return"function"==typeof t},u=function(t,e,r,u){u=n(u);var f=!1;t.on("close",(function(){f=!0})),o(t,{readable:e,writable:r},(function(t){if(t)return u(t);f=!0,u()}));var l=!1;return function(e){if(!f&&!l)return l=!0,function(t){return!!a&&!!i&&(t instanceof(i.ReadStream||s)||t instanceof(i.WriteStream||s))&&c(t.close)}(t)?t.close(s):function(t){return t.setHeader&&c(t.abort)}(t)?t.abort():c(t.destroy)?t.destroy():void u(e||new Error("stream was destroyed"))}},f=function(t){t()},l=function(t,e){return t.pipe(e)};t.exports=function(){var t,e=Array.prototype.slice.call(arguments),r=c(e[e.length-1]||s)&&e.pop()||s;if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new Error("pump requires two streams per minimum");var n=e.map((function(o,i){var s=i<e.length-1;return u(o,s,i>0,(function(e){t||(t=e),e&&n.forEach(f),s||(n.forEach(f),r(t))}))}));return e.reduce(l)}},function(t,e,r){var n=r(11),o=function(){},i=function(t,e,r){if("function"==typeof e)return i(t,null,e);e||(e={}),r=n(r||o);var s=t._writableState,a=t._readableState,c=e.readable||!1!==e.readable&&t.readable,u=e.writable||!1!==e.writable&&t.writable,f=!1,l=function(){t.writable||p()},p=function(){u=!1,c||r.call(t)},h=function(){c=!1,u||r.call(t)},d=function(e){r.call(t,e?new Error("exited with error code: "+e):null)},m=function(e){r.call(t,e)},y=function(){process.nextTick(g)},g=function(){if(!f)return(!c||a&&a.ended&&!a.destroyed)&&(!u||s&&s.ended&&!s.destroyed)?void 0:r.call(t,new Error("premature close"))},b=function(){t.req.on("finish",p)};return!function(t){return t.setHeader&&"function"==typeof t.abort}(t)?u&&!s&&(t.on("end",l),t.on("close",l)):(t.on("complete",p),t.on("abort",y),t.req?b():t.on("request",b)),function(t){return t.stdio&&Array.isArray(t.stdio)&&3===t.stdio.length}(t)&&t.on("exit",d),t.on("end",h),t.on("finish",p),!1!==e.error&&t.on("error",m),t.on("close",y),function(){f=!0,t.removeListener("complete",p),t.removeListener("abort",y),t.removeListener("request",b),t.req&&t.req.removeListener("finish",p),t.removeListener("end",l),t.removeListener("close",l),t.removeListener("finish",p),t.removeListener("exit",d),t.removeListener("end",h),t.removeListener("error",m),t.removeListener("close",y)}};t.exports=i},function(t,e,r){"use strict";const{PassThrough:n}=r(6);t.exports=t=>{t={...t};const{array:e}=t;let{encoding:r}=t;const o="buffer"===r;let i=!1;e?i=!(r||o):r=r||"utf8",o&&(r=null);const s=new n({objectMode:i});r&&s.setEncoding(r);let a=0;const c=[];return s.on("data",(t=>{c.push(t),i?a=c.length:a+=t.length})),s.getBufferedValue=()=>e?c:o?Buffer.concat(c,a):c.join(""),s.getBufferedLength=()=>a,s}},function(t,e,r){var n=r(1),o=r(67),i=r(68),s=r(70),a=r(2),c=r(7).EventEmitter,u=r(6).Transform,f=r(6).PassThrough,l=r(6).Writable;function p(t,e,r){"function"==typeof e&&(r=e,e=null),null==e&&(e={}),null==e.autoClose&&(e.autoClose=!1),null==e.lazyEntries&&(e.lazyEntries=!1),null==e.decodeStrings&&(e.decodeStrings=!0),null==e.validateEntrySizes&&(e.validateEntrySizes=!0),null==e.strictFileNames&&(e.strictFileNames=!1),null==r&&(r=T),n.fstat(t,(function(n,o){if(n)return r(n);h(i.createFromFd(t,{autoClose:!0}),o.size,e,r)}))}function h(t,e,r,n){"function"==typeof r&&(n=r,r=null),null==r&&(r={}),null==r.autoClose&&(r.autoClose=!0),null==r.lazyEntries&&(r.lazyEntries=!1),null==r.decodeStrings&&(r.decodeStrings=!0);var o=!!r.decodeStrings;if(null==r.validateEntrySizes&&(r.validateEntrySizes=!0),null==r.strictFileNames&&(r.strictFileNames=!1),null==n&&(n=T),"number"!=typeof e)throw new Error("expected totalSize parameter to be a number");if(e>Number.MAX_SAFE_INTEGER)throw new Error("zip file too large. only file sizes up to 2^52 are supported due to JavaScript's Number type being an IEEE 754 double.");t.ref();var i=Math.min(65557,e),s=O(i),a=e-s.length;v(t,s,0,i,a,(function(c){if(c)return n(c);for(var u=i-22;u>=0;u-=1)if(101010256===s.readUInt32LE(u)){var f=s.slice(u),l=f.readUInt16LE(4);if(0!==l)return n(new Error("multi-disk zip files are not supported: found disk number: "+l));var p=f.readUInt16LE(10),h=f.readUInt32LE(16),m=f.readUInt16LE(20),y=f.length-22;if(m!==y)return n(new Error("invalid comment length. expected: "+y+". found: "+m));var g=o?C(f,22,f.length,!1):f.slice(22);if(65535!==p&&4294967295!==h)return n(null,new d(t,h,e,p,g,r.autoClose,r.lazyEntries,o,r.validateEntrySizes,r.strictFileNames));var b=O(20),w=a+u-b.length;return void v(t,b,0,b.length,w,(function(i){if(i)return n(i);if(117853008!==b.readUInt32LE(0))return n(new Error("invalid zip64 end of central directory locator signature"));var s=k(b,8),a=O(56);v(t,a,0,a.length,s,(function(i){return i?n(i):101075792!==a.readUInt32LE(0)?n(new Error("invalid zip64 end of central directory record signature")):(p=k(a,32),h=k(a,48),n(null,new d(t,h,e,p,g,r.autoClose,r.lazyEntries,o,r.validateEntrySizes,r.strictFileNames)))}))}))}n(new Error("end of central directory record signature not found"))}))}function d(t,e,r,n,o,i,s,a,u,f){var l=this;c.call(l),l.reader=t,l.reader.on("error",(function(t){y(l,t)})),l.reader.once("close",(function(){l.emit("close")})),l.readEntryCursor=e,l.fileSize=r,l.entryCount=n,l.comment=o,l.entriesRead=0,l.autoClose=!!i,l.lazyEntries=!!s,l.decodeStrings=!!a,l.validateEntrySizes=!!u,l.strictFileNames=!!f,l.isOpen=!0,l.emittedError=!1,l.lazyEntries||l._readEntry()}function m(t,e){t.autoClose&&t.close(),y(t,e)}function y(t,e){t.emittedError||(t.emittedError=!0,t.emit("error",e))}function g(){}function b(t,e){return new Date(1980+(t>>9&127),(t>>5&15)-1,31&t,e>>11&31,e>>5&63,2*(31&e),0)}function w(t){return-1!==t.indexOf("\\")?"invalid characters in fileName: "+t:/^[a-zA-Z]:/.test(t)||/^\//.test(t)?"absolute path: "+t:-1!==t.split("/").indexOf("..")?"invalid relative path: "+t:null}function v(t,e,r,n,o,i){if(0===n)return setImmediate((function(){i(null,O(0))}));t.read(e,r,n,o,(function(t,e){return t?i(t):e<n?i(new Error("unexpected EOF")):void i()}))}function E(t){u.call(this),this.actualByteCount=0,this.expectedByteCount=t}function x(){c.call(this),this.refCount=0}function _(t){f.call(this),this.context=t,this.context.ref(),this.unreffedYet=!1}e.open=function(t,e,r){"function"==typeof e&&(r=e,e=null);null==e&&(e={});null==e.autoClose&&(e.autoClose=!0);null==e.lazyEntries&&(e.lazyEntries=!1);null==e.decodeStrings&&(e.decodeStrings=!0);null==e.validateEntrySizes&&(e.validateEntrySizes=!0);null==e.strictFileNames&&(e.strictFileNames=!1);null==r&&(r=T);n.open(t,"r",(function(t,o){if(t)return r(t);p(o,e,(function(t,e){t&&n.close(o,T),r(t,e)}))}))},e.fromFd=p,e.fromBuffer=function(t,e,r){"function"==typeof e&&(r=e,e=null);null==e&&(e={});e.autoClose=!1,null==e.lazyEntries&&(e.lazyEntries=!1);null==e.decodeStrings&&(e.decodeStrings=!0);null==e.validateEntrySizes&&(e.validateEntrySizes=!0);null==e.strictFileNames&&(e.strictFileNames=!1);h(i.createFromBuffer(t,{maxChunkSize:65536}),t.length,e,r)},e.fromRandomAccessReader=h,e.dosDateTimeToDate=b,e.validateFileName=w,e.ZipFile=d,e.Entry=g,e.RandomAccessReader=x,a.inherits(d,c),d.prototype.close=function(){this.isOpen&&(this.isOpen=!1,this.reader.unref())},d.prototype.readEntry=function(){if(!this.lazyEntries)throw new Error("readEntry() called without lazyEntries:true");this._readEntry()},d.prototype._readEntry=function(){var t=this;if(t.entryCount!==t.entriesRead){if(!t.emittedError){var e=O(46);v(t.reader,e,0,e.length,t.readEntryCursor,(function(r){if(r)return m(t,r);if(!t.emittedError){var n=new g,o=e.readUInt32LE(0);if(33639248!==o)return m(t,new Error("invalid central directory file header signature: 0x"+o.toString(16)));if(n.versionMadeBy=e.readUInt16LE(4),n.versionNeededToExtract=e.readUInt16LE(6),n.generalPurposeBitFlag=e.readUInt16LE(8),n.compressionMethod=e.readUInt16LE(10),n.lastModFileTime=e.readUInt16LE(12),n.lastModFileDate=e.readUInt16LE(14),n.crc32=e.readUInt32LE(16),n.compressedSize=e.readUInt32LE(20),n.uncompressedSize=e.readUInt32LE(24),n.fileNameLength=e.readUInt16LE(28),n.extraFieldLength=e.readUInt16LE(30),n.fileCommentLength=e.readUInt16LE(32),n.internalFileAttributes=e.readUInt16LE(36),n.externalFileAttributes=e.readUInt32LE(38),n.relativeOffsetOfLocalHeader=e.readUInt32LE(42),64&n.generalPurposeBitFlag)return m(t,new Error("strong encryption is not supported"));t.readEntryCursor+=46,e=O(n.fileNameLength+n.extraFieldLength+n.fileCommentLength),v(t.reader,e,0,e.length,t.readEntryCursor,(function(r){if(r)return m(t,r);if(!t.emittedError){var o=0!=(2048&n.generalPurposeBitFlag);n.fileName=t.decodeStrings?C(e,0,n.fileNameLength,o):e.slice(0,n.fileNameLength);var i=n.fileNameLength+n.extraFieldLength,a=e.slice(n.fileNameLength,i);n.extraFields=[];for(var c=0;c<a.length-3;){var u=a.readUInt16LE(c+0),f=a.readUInt16LE(c+2),l=c+4,p=l+f;if(p>a.length)return m(t,new Error("extra field length exceeds extra field buffer size"));var h=O(f);a.copy(h,0,l,p),n.extraFields.push({id:u,data:h}),c=p}if(n.fileComment=t.decodeStrings?C(e,i,i+n.fileCommentLength,o):e.slice(i,i+n.fileCommentLength),n.comment=n.fileComment,t.readEntryCursor+=e.length,t.entriesRead+=1,4294967295===n.uncompressedSize||4294967295===n.compressedSize||4294967295===n.relativeOffsetOfLocalHeader){var d=null;for(c=0;c<n.extraFields.length;c++){if(1===(g=n.extraFields[c]).id){d=g.data;break}}if(null==d)return m(t,new Error("expected zip64 extended information extra field"));var y=0;if(4294967295===n.uncompressedSize){if(y+8>d.length)return m(t,new Error("zip64 extended information extra field does not include uncompressed size"));n.uncompressedSize=k(d,y),y+=8}if(4294967295===n.compressedSize){if(y+8>d.length)return m(t,new Error("zip64 extended information extra field does not include compressed size"));n.compressedSize=k(d,y),y+=8}if(4294967295===n.relativeOffsetOfLocalHeader){if(y+8>d.length)return m(t,new Error("zip64 extended information extra field does not include relative header offset"));n.relativeOffsetOfLocalHeader=k(d,y),y+=8}}if(t.decodeStrings)for(c=0;c<n.extraFields.length;c++){var g;if(28789===(g=n.extraFields[c]).id){if(g.data.length<6)continue;if(1!==g.data.readUInt8(0))continue;var b=g.data.readUInt32LE(1);if(s.unsigned(e.slice(0,n.fileNameLength))!==b)continue;n.fileName=C(g.data,5,g.data.length,!0);break}}if(t.validateEntrySizes&&0===n.compressionMethod){var v=n.uncompressedSize;if(n.isEncrypted()&&(v+=12),n.compressedSize!==v){var E="compressed/uncompressed size mismatch for stored file: "+n.compressedSize+" != "+n.uncompressedSize;return m(t,new Error(E))}}if(t.decodeStrings){t.strictFileNames||(n.fileName=n.fileName.replace(/\\/g,"/"));var x=w(n.fileName,t.validateFileNameOptions);if(null!=x)return m(t,new Error(x))}t.emit("entry",n),t.lazyEntries||t._readEntry()}}))}}))}}else setImmediate((function(){t.autoClose&&t.close(),t.emittedError||t.emit("end")}))},d.prototype.openReadStream=function(t,e,r){var n=this,i=0,s=t.compressedSize;if(null==r)r=e,e={};else{if(null!=e.decrypt){if(!t.isEncrypted())throw new Error("options.decrypt can only be specified for encrypted entries");if(!1!==e.decrypt)throw new Error("invalid options.decrypt value: "+e.decrypt);if(t.isCompressed()&&!1!==e.decompress)throw new Error("entry is encrypted and compressed, and options.decompress !== false")}if(null!=e.decompress){if(!t.isCompressed())throw new Error("options.decompress can only be specified for compressed entries");if(!1!==e.decompress&&!0!==e.decompress)throw new Error("invalid options.decompress value: "+e.decompress)}if(null!=e.start||null!=e.end){if(t.isCompressed()&&!1!==e.decompress)throw new Error("start/end range not allowed for compressed entry without options.decompress === false");if(t.isEncrypted()&&!1!==e.decrypt)throw new Error("start/end range not allowed for encrypted entry without options.decrypt === false")}if(null!=e.start){if((i=e.start)<0)throw new Error("options.start < 0");if(i>t.compressedSize)throw new Error("options.start > entry.compressedSize")}if(null!=e.end){if((s=e.end)<0)throw new Error("options.end < 0");if(s>t.compressedSize)throw new Error("options.end > entry.compressedSize");if(s<i)throw new Error("options.end < options.start")}}if(!n.isOpen)return r(new Error("closed"));if(t.isEncrypted()&&!1!==e.decrypt)return r(new Error("entry is encrypted, and options.decrypt !== false"));n.reader.ref();var a=O(30);v(n.reader,a,0,a.length,t.relativeOffsetOfLocalHeader,(function(c){try{if(c)return r(c);var u=a.readUInt32LE(0);if(67324752!==u)return r(new Error("invalid local file header signature: 0x"+u.toString(16)));var f,l=a.readUInt16LE(26),p=a.readUInt16LE(28),h=t.relativeOffsetOfLocalHeader+a.length+l+p;if(0===t.compressionMethod)f=!1;else{if(8!==t.compressionMethod)return r(new Error("unsupported compression method: "+t.compressionMethod));f=null==e.decompress||e.decompress}var d=h,m=d+t.compressedSize;if(0!==t.compressedSize&&m>n.fileSize)return r(new Error("file data overflows file bounds: "+d+" + "+t.compressedSize+" > "+n.fileSize));var y=n.reader.createReadStream({start:d+i,end:d+s}),g=y;if(f){var b=!1,w=o.createInflateRaw();y.on("error",(function(t){setImmediate((function(){b||w.emit("error",t)}))})),y.pipe(w),n.validateEntrySizes?(g=new E(t.uncompressedSize),w.on("error",(function(t){setImmediate((function(){b||g.emit("error",t)}))})),w.pipe(g)):g=w,g.destroy=function(){b=!0,w!==g&&w.unpipe(g),y.unpipe(w),y.destroy()}}r(null,g)}finally{n.reader.unref()}}))},g.prototype.getLastModDate=function(){return b(this.lastModFileDate,this.lastModFileTime)},g.prototype.isEncrypted=function(){return 0!=(1&this.generalPurposeBitFlag)},g.prototype.isCompressed=function(){return 8===this.compressionMethod},a.inherits(E,u),E.prototype._transform=function(t,e,r){if(this.actualByteCount+=t.length,this.actualByteCount>this.expectedByteCount){var n="too many bytes in the stream. expected "+this.expectedByteCount+". got at least "+this.actualByteCount;return r(new Error(n))}r(null,t)},E.prototype._flush=function(t){if(this.actualByteCount<this.expectedByteCount){var e="not enough bytes in the stream. expected "+this.expectedByteCount+". got only "+this.actualByteCount;return t(new Error(e))}t()},a.inherits(x,c),x.prototype.ref=function(){this.refCount+=1},x.prototype.unref=function(){var t=this;if(t.refCount-=1,!(t.refCount>0)){if(t.refCount<0)throw new Error("invalid unref");t.close((function(e){if(e)return t.emit("error",e);t.emit("close")}))}},x.prototype.createReadStream=function(t){var e=t.start,r=t.end;if(e===r){var n=new f;return setImmediate((function(){n.end()})),n}var o=this._readStreamForRange(e,r),i=!1,s=new _(this);o.on("error",(function(t){setImmediate((function(){i||s.emit("error",t)}))})),s.destroy=function(){o.unpipe(s),s.unref(),o.destroy()};var a=new E(r-e);return s.on("error",(function(t){setImmediate((function(){i||a.emit("error",t)}))})),a.destroy=function(){i=!0,s.unpipe(a),s.destroy()},o.pipe(s).pipe(a)},x.prototype._readStreamForRange=function(t,e){throw new Error("not implemented")},x.prototype.read=function(t,e,r,n,o){var i=this.createReadStream({start:n,end:n+r}),s=new l,a=0;s._write=function(r,n,o){r.copy(t,e+a,0,r.length),a+=r.length,o()},s.on("finish",o),i.on("error",(function(t){o(t)})),i.pipe(s)},x.prototype.close=function(t){setImmediate(t)},a.inherits(_,f),_.prototype._flush=function(t){this.unref(),t()},_.prototype.unref=function(t){this.unreffedYet||(this.unreffedYet=!0,this.context.unref())};var O,S="\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ";function C(t,e,r,n){if(n)return t.toString("utf8",e,r);for(var o="",i=e;i<r;i++)o+=S[t[i]];return o}function k(t,e){var r=t.readUInt32LE(e);return 4294967296*t.readUInt32LE(e+4)+r}function T(t){if(t)throw t}O="function"==typeof Buffer.allocUnsafe?function(t){return Buffer.allocUnsafe(t)}:function(t){return new Buffer(t)}},function(t,e){t.exports=require("zlib")},function(t,e,r){var n=r(1),o=r(2),i=r(6),s=i.Readable,a=i.Writable,c=i.PassThrough,u=r(69),f=r(7).EventEmitter;function l(t,e){e=e||{},f.call(this),this.fd=t,this.pend=new u,this.pend.max=1,this.refCount=0,this.autoClose=!!e.autoClose}function p(t,e){e=e||{},s.call(this,e),this.context=t,this.context.ref(),this.start=e.start||0,this.endOffset=e.end,this.pos=this.start,this.destroyed=!1}function h(t,e){e=e||{},a.call(this,e),this.context=t,this.context.ref(),this.start=e.start||0,this.endOffset=null==e.end?1/0:+e.end,this.bytesWritten=0,this.pos=this.start,this.destroyed=!1,this.on("finish",this.destroy.bind(this))}function d(t,e){f.call(this),e=e||{},this.refCount=0,this.buffer=t,this.maxChunkSize=e.maxChunkSize||Number.MAX_SAFE_INTEGER}e.createFromBuffer=function(t,e){return new d(t,e)},e.createFromFd=function(t,e){return new l(t,e)},e.BufferSlicer=d,e.FdSlicer=l,o.inherits(l,f),l.prototype.read=function(t,e,r,o,i){var s=this;s.pend.go((function(a){n.read(s.fd,t,e,r,o,(function(t,e,r){a(),i(t,e,r)}))}))},l.prototype.write=function(t,e,r,o,i){var s=this;s.pend.go((function(a){n.write(s.fd,t,e,r,o,(function(t,e,r){a(),i(t,e,r)}))}))},l.prototype.createReadStream=function(t){return new p(this,t)},l.prototype.createWriteStream=function(t){return new h(this,t)},l.prototype.ref=function(){this.refCount+=1},l.prototype.unref=function(){var t=this;if(t.refCount-=1,!(t.refCount>0)){if(t.refCount<0)throw new Error("invalid unref");t.autoClose&&n.close(t.fd,(function(e){e?t.emit("error",e):t.emit("close")}))}},o.inherits(p,s),p.prototype._read=function(t){var e=this;if(!e.destroyed){var r=Math.min(e._readableState.highWaterMark,t);if(null!=e.endOffset&&(r=Math.min(r,e.endOffset-e.pos)),r<=0)return e.destroyed=!0,e.push(null),void e.context.unref();e.context.pend.go((function(t){if(e.destroyed)return t();var o=new Buffer(r);n.read(e.context.fd,o,0,r,e.pos,(function(r,n){r?e.destroy(r):0===n?(e.destroyed=!0,e.push(null),e.context.unref()):(e.pos+=n,e.push(o.slice(0,n))),t()}))}))}},p.prototype.destroy=function(t){this.destroyed||(t=t||new Error("stream destroyed"),this.destroyed=!0,this.emit("error",t),this.context.unref())},o.inherits(h,a),h.prototype._write=function(t,e,r){var o=this;if(!o.destroyed){if(o.pos+t.length>o.endOffset){var i=new Error("maximum file length exceeded");return i.code="ETOOBIG",o.destroy(),void r(i)}o.context.pend.go((function(e){if(o.destroyed)return e();n.write(o.context.fd,t,0,t.length,o.pos,(function(t,n){t?(o.destroy(),e(),r(t)):(o.bytesWritten+=n,o.pos+=n,o.emit("progress"),e(),r())}))}))}},h.prototype.destroy=function(){this.destroyed||(this.destroyed=!0,this.context.unref())},o.inherits(d,f),d.prototype.read=function(t,e,r,n,o){var i=n+r,s=i-this.buffer.length,a=s>0?s:r;this.buffer.copy(t,e,n,i),setImmediate((function(){o(null,a)}))},d.prototype.write=function(t,e,r,n,o){t.copy(this.buffer,n,e,e+r),setImmediate((function(){o(null,r,t)}))},d.prototype.createReadStream=function(t){var e=new c(t=t||{});e.destroyed=!1,e.start=t.start||0,e.endOffset=t.end,e.pos=e.endOffset||this.buffer.length;for(var r=this.buffer.slice(e.start,e.pos),n=0;;){var o=n+this.maxChunkSize;if(o>=r.length){n<r.length&&e.write(r.slice(n,r.length));break}e.write(r.slice(n,o)),n=o}return e.end(),e.destroy=function(){e.destroyed=!0},e},d.prototype.createWriteStream=function(t){var e=this,r=new a(t=t||{});return r.start=t.start||0,r.endOffset=null==t.end?this.buffer.length:+t.end,r.bytesWritten=0,r.pos=r.start,r.destroyed=!1,r._write=function(t,n,o){if(!r.destroyed){var i=r.pos+t.length;if(i>r.endOffset){var s=new Error("maximum file length exceeded");return s.code="ETOOBIG",r.destroyed=!0,void o(s)}t.copy(e.buffer,r.pos,0,t.length),r.bytesWritten+=t.length,r.pos=i,r.emit("progress"),o()}},r.destroy=function(){r.destroyed=!0},r},d.prototype.ref=function(){this.refCount+=1},d.prototype.unref=function(){if(this.refCount-=1,this.refCount<0)throw new Error("invalid unref")}},function(t,e){function r(){this.pending=0,this.max=1/0,this.listeners=[],this.waiting=[],this.error=null}function n(t){t.pending+=1;var e=!1;return function(n){if(e)throw new Error("callback called twice");if(e=!0,t.error=t.error||n,t.pending-=1,t.waiting.length>0&&t.pending<t.max)o(t,t.waiting.shift());else if(0===t.pending){var i=t.listeners;t.listeners=[],i.forEach(r)}};function r(e){e(t.error)}}function o(t,e){e(n(t))}t.exports=r,r.prototype.go=function(t){this.pending<this.max?o(this,t):this.waiting.push(t)},r.prototype.wait=function(t){0===this.pending?t(this.error):this.listeners.push(t)},r.prototype.hold=function(){return n(this)}},function(t,e,r){var n=r(27).Buffer,o=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];function i(t){if(n.isBuffer(t))return t;var e="function"==typeof n.alloc&&"function"==typeof n.from;if("number"==typeof t)return e?n.alloc(t):new n(t);if("string"==typeof t)return e?n.from(t):new n(t);throw new Error("input must be buffer, number, or string, received "+typeof t)}function s(t,e){t=i(t),n.isBuffer(e)&&(e=e.readUInt32BE(0));for(var r=-1^~~e,s=0;s<t.length;s++)r=o[255&(r^t[s])]^r>>>8;return-1^r}function a(){return t=s.apply(null,arguments),(e=i(4)).writeInt32BE(t,0),e;var t,e}"undefined"!=typeof Int32Array&&(o=new Int32Array(o)),a.signed=function(){return s.apply(null,arguments)},a.unsigned=function(){return s.apply(null,arguments)>>>0},t.exports=a},function(t,e){function r(t,e){if(this.stream=e.stream||process.stderr,"number"==typeof e){var r=e;(e={}).total=r}else{if(e=e||{},"string"!=typeof t)throw new Error("format required");if("number"!=typeof e.total)throw new Error("total required")}this.fmt=t,this.curr=e.curr||0,this.total=e.total,this.width=e.width||this.total,this.clear=e.clear,this.chars={complete:e.complete||"=",incomplete:e.incomplete||"-",head:e.head||e.complete||"="},this.renderThrottle=0!==e.renderThrottle?e.renderThrottle||16:0,this.lastRender=-1/0,this.callback=e.callback||function(){},this.tokens={},this.lastDraw=""}t.exports=r,r.prototype.tick=function(t,e){if(0!==t&&(t=t||1),"object"==typeof t&&(e=t,t=1),e&&(this.tokens=e),0==this.curr&&(this.start=new Date),this.curr+=t,this.render(),this.curr>=this.total)return this.render(void 0,!0),this.complete=!0,this.terminate(),void this.callback(this)},r.prototype.render=function(t,e){if(e=void 0!==e&&e,t&&(this.tokens=t),this.stream.isTTY){var r=Date.now(),n=r-this.lastRender;if(e||!(n<this.renderThrottle)){this.lastRender=r;var o=this.curr/this.total;o=Math.min(Math.max(o,0),1);var i,s,a,c=Math.floor(100*o),u=new Date-this.start,f=100==c?0:u*(this.total/this.curr-1),l=this.curr/(u/1e3),p=this.fmt.replace(":current",this.curr).replace(":total",this.total).replace(":elapsed",isNaN(u)?"0.0":(u/1e3).toFixed(1)).replace(":eta",isNaN(f)||!isFinite(f)?"0.0":(f/1e3).toFixed(1)).replace(":percent",c.toFixed(0)+"%").replace(":rate",Math.round(l)),h=Math.max(0,this.stream.columns-p.replace(":bar","").length);h&&"win32"===process.platform&&(h-=1);var d=Math.min(this.width,h);if(a=Math.round(d*o),s=Array(Math.max(0,a+1)).join(this.chars.complete),i=Array(Math.max(0,d-a+1)).join(this.chars.incomplete),a>0&&(s=s.slice(0,-1)+this.chars.head),p=p.replace(":bar",s+i),this.tokens)for(var m in this.tokens)p=p.replace(":"+m,this.tokens[m]);this.lastDraw!==p&&(this.stream.cursorTo(0),this.stream.write(p),this.stream.clearLine(1),this.lastDraw=p)}}},r.prototype.update=function(t,e){var r=Math.floor(t*this.total)-this.curr;this.tick(r,e)},r.prototype.interrupt=function(t){this.stream.clearLine(),this.stream.cursorTo(0),this.stream.write(t),this.stream.write("\n"),this.stream.write(this.lastDraw)},r.prototype.terminate=function(){this.clear?this.stream.clearLine&&(this.stream.clearLine(),this.stream.cursorTo(0)):this.stream.write("\n")}},function(t,e,r){"use strict";const n=(this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}})(r(73));function o(t){return new n.default(t)}!function(t){t.HttpsProxyAgent=n.default,t.prototype=n.default.prototype}(o||(o={})),t.exports=o},function(t,e,r){"use strict";var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function s(t){try{c(n.next(t))}catch(t){i(t)}}function a(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}c((n=n.apply(t,e||[])).next())}))},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const i=o(r(74)),s=o(r(75)),a=o(r(9)),c=o(r(8)),u=o(r(12)),f=r(76),l=o(r(78)),p=u.default("https-proxy-agent:agent");class h extends f.Agent{constructor(t){let e;if(e="string"==typeof t?a.default.parse(t):t,!e)throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");p("creating new HttpsProxyAgent instance: %o",e),super(e);const r=Object.assign({},e);var n;this.secureProxy=e.secureProxy||"string"==typeof(n=r.protocol)&&/^https:?$/i.test(n),r.host=r.hostname||r.host,"string"==typeof r.port&&(r.port=parseInt(r.port,10)),!r.port&&r.host&&(r.port=this.secureProxy?443:80),this.secureProxy&&!("ALPNProtocols"in r)&&(r.ALPNProtocols=["http 1.1"]),r.host&&r.path&&(delete r.path,delete r.pathname),this.proxy=r}callback(t,e){return n(this,void 0,void 0,(function*(){const{proxy:r,secureProxy:n}=this;let o;n?(p("Creating `tls.Socket`: %o",r),o=s.default.connect(r)):(p("Creating `net.Socket`: %o",r),o=i.default.connect(r));const a=Object.assign({},r.headers);let u=`CONNECT ${`${e.host}:${e.port}`} HTTP/1.1\r\n`;r.auth&&(a["Proxy-Authorization"]=`Basic ${Buffer.from(r.auth).toString("base64")}`);let{host:f,port:h,secureEndpoint:m}=e;(function(t,e){return Boolean(!e&&80===t||e&&443===t)})(h,m)||(f+=`:${h}`),a.Host=f,a.Connection="close";for(const t of Object.keys(a))u+=`${t}: ${a[t]}\r\n`;const y=l.default(o);o.write(`${u}\r\n`);const{statusCode:g,buffered:b}=yield y;if(200===g){if(t.once("socket",d),e.secureEndpoint){p("Upgrading socket connection to TLS");const t=e.servername||e.host;return s.default.connect(Object.assign(Object.assign({},function(t,...e){const r={};let n;for(n in t)e.includes(n)||(r[n]=t[n]);return r}(e,"host","hostname","path","port")),{socket:o,servername:t}))}return o}o.destroy();const w=new i.default.Socket({writable:!1});return w.readable=!0,t.once("socket",(t=>{p("replaying proxy buffer for failed request"),c.default(t.listenerCount("data")>0),t.push(b),t.push(null)})),w}))}}function d(t){t.resume()}e.default=h},function(t,e){t.exports=require("net")},function(t,e){t.exports=require("tls")},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};const o=r(7),i=n(r(12)),s=n(r(77)),a=i.default("agent-base");function c(){const{stack:t}=new Error;return"string"==typeof t&&t.split("\n").some((t=>-1!==t.indexOf("(https.js:")||-1!==t.indexOf("node:https:")))}function u(t,e){return new u.Agent(t,e)}!function(t){class e extends o.EventEmitter{constructor(t,e){super();let r=e;"function"==typeof t?this.callback=t:t&&(r=t),this.timeout=null,r&&"number"==typeof r.timeout&&(this.timeout=r.timeout),this.maxFreeSockets=1,this.maxSockets=1,this.maxTotalSockets=1/0,this.sockets={},this.freeSockets={},this.requests={},this.options={}}get defaultPort(){return"number"==typeof this.explicitDefaultPort?this.explicitDefaultPort:c()?443:80}set defaultPort(t){this.explicitDefaultPort=t}get protocol(){return"string"==typeof this.explicitProtocol?this.explicitProtocol:c()?"https:":"http:"}set protocol(t){this.explicitProtocol=t}callback(t,e,r){throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`')}addRequest(t,e){const r=Object.assign({},e);"boolean"!=typeof r.secureEndpoint&&(r.secureEndpoint=c()),null==r.host&&(r.host="localhost"),null==r.port&&(r.port=r.secureEndpoint?443:80),null==r.protocol&&(r.protocol=r.secureEndpoint?"https:":"http:"),r.host&&r.path&&delete r.path,delete r.agent,delete r.hostname,delete r._defaultAgent,delete r.defaultPort,delete r.createConnection,t._last=!0,t.shouldKeepAlive=!1;let n=!1,o=null;const i=r.timeout||this.timeout,u=e=>{t._hadError||(t.emit("error",e),t._hadError=!0)},f=()=>{o=null,n=!0;const t=new Error(`A "socket" was not created for HTTP request before ${i}ms`);t.code="ETIMEOUT",u(t)},l=t=>{n||(null!==o&&(clearTimeout(o),o=null),u(t))},p=e=>{if(n)return;if(null!=o&&(clearTimeout(o),o=null),i=e,Boolean(i)&&"function"==typeof i.addRequest)return a("Callback returned another Agent instance %o",e.constructor.name),void e.addRequest(t,r);var i;if(e)return e.once("free",(()=>{this.freeSocket(e,r)})),void t.onSocket(e);const s=new Error(`no Duplex stream was returned to agent-base for \`${t.method} ${t.path}\``);u(s)};if("function"==typeof this.callback){this.promisifiedCallback||(this.callback.length>=3?(a("Converting legacy callback function to promise"),this.promisifiedCallback=s.default(this.callback)):this.promisifiedCallback=this.callback),"number"==typeof i&&i>0&&(o=setTimeout(f,i)),"port"in r&&"number"!=typeof r.port&&(r.port=Number(r.port));try{a("Resolving socket for %o request: %o",r.protocol,`${t.method} ${t.path}`),Promise.resolve(this.promisifiedCallback(t,r)).then(p,l)}catch(t){Promise.reject(t).catch(l)}}else u(new Error("`callback` is not defined"))}freeSocket(t,e){a("Freeing socket %o %o",t.constructor.name,e),t.destroy()}destroy(){a("Destroying agent %o",this.constructor.name)}}t.Agent=e,t.prototype=t.Agent.prototype}(u||(u={})),t.exports=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){return function(e,r){return new Promise(((n,o)=>{t.call(this,e,r,((t,e)=>{t?o(t):n(e)}))}))}}},function(t,e,r){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=n(r(12)).default("https-proxy-agent:parse-proxy-response");e.default=function(t){return new Promise(((e,r)=>{let n=0;const i=[];function s(){const r=t.read();r?function(t){i.push(t),n+=t.length;const r=Buffer.concat(i,n);if(-1===r.indexOf("\r\n\r\n"))return o("have not received end of HTTP headers yet..."),void s();const a=r.toString("ascii",0,r.indexOf("\r\n")),c=+a.split(" ")[1];o("got proxy server response: %o",a),e({statusCode:c,buffered:r})}(r):t.once("readable",s)}function a(t){o("onclose had error %o",t)}function c(){o("onend")}function u(e){t.removeListener("end",c),t.removeListener("error",u),t.removeListener("close",a),t.removeListener("readable",s),o("onerror %o",e),r(e)}t.on("error",u),t.on("close",a),t.on("end",c),s()}))}},function(t,e){t.exports=require("https")},function(t,e){t.exports=require("http")}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,